"use strict";

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertAfterImports = insertAfterImports;
exports.transform = transform;

var _loaderUtils = require("loader-utils");

var _readAsObject = require("./dependencies-lookup/readAsObject");

var _getRidOfUselessFilePrefixes = require("./dependencies-lookup/getRidOfUselessFilePrefixes");

var _parsers = _interopRequireDefault(require("./abstract-syntax-tree/parsers"));

var _traverseHelpers = require("./abstract-syntax-tree/traverse-helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function insertAfterImports(classLoader, insert, source) {
  const options = (0, _loaderUtils.getOptions)(classLoader) || {};
  let ast;

  try {
    ast = (0, _parsers.default)(options.parser || classLoader.extension || 'javascript').parse(source);
  } catch (e) {
    // if not working, then we will fallback to not adding anything
    // perhaps the code was not written in javascript
    return source;
  }

  if (!ast) return `${insert}${source}`;
  const endOfImportsIndex = (0, _traverseHelpers.endOfImports)(ast);
  const result = `${source.substring(0, endOfImportsIndex)}\n${insert}\n${source.substring(endOfImportsIndex)}`;
  return result;
}

function transform(inputSource) {
  return (0, _readAsObject.readStory)(this, inputSource).then(_getRidOfUselessFilePrefixes.getRidOfUselessFilePrefixes).then(({
    prefix,
    resource,
    source,
    sourceJson,
    addsMap,
    dependencies,
    localDependencies,
    idsToFrameworks
  }) => {
    const preamble = `
/* eslint-disable */
// @ts-ignore
var withSourceLoader = require('@storybook/source-loader/preview').withSource;
// @ts-ignore
var addSourceDecorator = require("@storybook/source-loader/preview").addSource;
// @ts-ignore
var __SOURCE_PREFIX__ = "${prefix.replace(/\\([^\\ ])/g, '\\\\$1')}";
// @ts-ignore
var __STORY__ = ${sourceJson};
// @ts-ignore
var __ADDS_MAP__ = ${JSON.stringify(addsMap)};
// @ts-ignore
var __MAIN_FILE_LOCATION__ = ${JSON.stringify(resource)};
// @ts-ignore
var __MODULE_DEPENDENCIES__ = ${JSON.stringify(dependencies)};
// @ts-ignore
var __LOCAL_DEPENDENCIES__ = ${JSON.stringify(localDependencies)};
// @ts-ignore
var __IDS_TO_FRAMEWORKS__ = ${JSON.stringify(idsToFrameworks)};
/* eslint-enable */
        `;
    return insertAfterImports(this, preamble, source); // return `${preamble}${source}`;
  });
}