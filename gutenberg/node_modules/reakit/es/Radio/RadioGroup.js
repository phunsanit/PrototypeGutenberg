import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { a as _objectSpread2 } from '../_rollupPluginBabelHelpers-419c3ce6.js';
import 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import { useWarning } from 'reakit-warning';
import 'reakit-utils/useLiveRef';
import 'reakit-utils/isSelfTarget';
import 'reakit-utils/useIsomorphicEffect';
import 'reakit-utils/hasFocusWithin';
import 'reakit-utils/isPortalEvent';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import 'reakit-utils/useSealedState';
import { useCreateElement } from 'reakit-system/useCreateElement';
import 'reakit-utils/createOnKeyDown';
import 'reakit-utils/getDocument';
import 'reakit-utils/fireEvent';
import 'reakit-utils/fireKeyboardEvent';
import 'reakit-utils/applyState';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import '../CompositeState-0df9c8f7.js';
import 'reakit-utils/getActiveElement';
import { unstable_useComposite } from '../Composite/Composite.js';
import '../Group/Group.js';
import '../Id/Id.js';
import '../Composite/CompositeGroup.js';
import 'reakit-utils/isTextField';
import 'reakit-utils/tabbable';
import '../setTextFieldValue-78ab5d56.js';
import '../Composite/CompositeItem.js';
import '../Composite/CompositeItemWidget.js';
import { useRadioState } from './RadioState.js';

var useRadioGroup = createHook({
  name: "RadioGroup",
  compose: unstable_useComposite,
  useState: useRadioState,
  useProps: function useProps(_, htmlProps) {
    return _objectSpread2({
      role: "radiogroup"
    }, htmlProps);
  }
});
var RadioGroup = createComponent({
  as: "div",
  useHook: useRadioGroup,
  useCreateElement: function useCreateElement$1(type, props, children) {
    process.env.NODE_ENV !== "production" ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/radio") : void 0;
    return useCreateElement(type, props, children);
  }
});

export { RadioGroup };
