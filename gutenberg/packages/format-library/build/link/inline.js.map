{"version":3,"sources":["@wordpress/format-library/src/link/inline.js"],"names":["InlineLinkUI","isActive","activeAttributes","addingLink","value","onChange","speak","stopAddingLink","mountingKey","uniqueId","nextLinkValue","setNextLinkValue","anchorRef","selection","window","getSelection","rangeCount","range","getRangeAt","element","startContainer","nextElementSibling","nodeType","Node","ELEMENT_NODE","parentNode","closest","start","end","linkValue","url","type","id","opensInNewTab","target","onChangeLink","nextValue","didToggleSetting","didToggleSettingForNewLink","undefined","newUrl","format","String","opensInNewWindow","newText","title","toInsert","text","length","newValue","activeFormats"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { uniqueId } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useMemo, useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport { withSpokenMessages, Popover } from '@wordpress/components';\nimport { prependHTTP } from '@wordpress/url';\nimport { create, insert, isCollapsed, applyFormat } from '@wordpress/rich-text';\nimport { __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport { createLinkFormat, isValidHref } from './utils';\n\nfunction InlineLinkUI( {\n\tisActive,\n\tactiveAttributes,\n\taddingLink,\n\tvalue,\n\tonChange,\n\tspeak,\n\tstopAddingLink,\n} ) {\n\t/**\n\t * A unique key is generated when switching between editing and not editing\n\t * a link, based on:\n\t *\n\t * - This component may be rendered _either_ when a link is active _or_\n\t *   when adding or editing a link.\n\t * - It's only desirable to shift focus into the Popover when explicitly\n\t *   adding or editing a link, not when in the inline boundary of a link.\n\t * - Focus behavior can only be controlled on a Popover at the time it\n\t *   mounts, so a new instance of the component must be mounted to\n\t *   programmatically enact the focusOnMount behavior.\n\t *\n\t * @type {string}\n\t */\n\tconst mountingKey = useMemo( uniqueId, [ addingLink ] );\n\n\t/**\n\t * Pending settings to be applied to the next link. When inserting a new\n\t * link, toggle values cannot be applied immediately, because there is not\n\t * yet a link for them to apply to. Thus, they are maintained in a state\n\t * value until the time that the link can be inserted or edited.\n\t *\n\t * @type {[Object|undefined,Function]}\n\t */\n\tconst [ nextLinkValue, setNextLinkValue ] = useState();\n\n\tconst anchorRef = useMemo( () => {\n\t\tconst selection = window.getSelection();\n\n\t\tif ( ! selection.rangeCount ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst range = selection.getRangeAt( 0 );\n\n\t\tif ( addingLink && ! isActive ) {\n\t\t\treturn range;\n\t\t}\n\n\t\tlet element = range.startContainer;\n\n\t\t// If the caret is right before the element, select the next element.\n\t\telement = element.nextElementSibling || element;\n\n\t\twhile ( element.nodeType !== window.Node.ELEMENT_NODE ) {\n\t\t\telement = element.parentNode;\n\t\t}\n\n\t\treturn element.closest( 'a' );\n\t}, [ addingLink, value.start, value.end ] );\n\n\tconst linkValue = {\n\t\turl: activeAttributes.url,\n\t\ttype: activeAttributes.type,\n\t\tid: activeAttributes.id,\n\t\topensInNewTab: activeAttributes.target === '_blank',\n\t\t...nextLinkValue,\n\t};\n\n\tfunction onChangeLink( nextValue ) {\n\t\t// Merge with values from state, both for the purpose of assigning the\n\t\t// next state value, and for use in constructing the new link format if\n\t\t// the link is ready to be applied.\n\t\tnextValue = {\n\t\t\t...nextLinkValue,\n\t\t\t...nextValue,\n\t\t};\n\n\t\t// LinkControl calls `onChange` immediately upon the toggling a setting.\n\t\tconst didToggleSetting =\n\t\t\tlinkValue.opensInNewTab !== nextValue.opensInNewTab &&\n\t\t\tlinkValue.url === nextValue.url;\n\n\t\t// If change handler was called as a result of a settings change during\n\t\t// link insertion, it must be held in state until the link is ready to\n\t\t// be applied.\n\t\tconst didToggleSettingForNewLink =\n\t\t\tdidToggleSetting && nextValue.url === undefined;\n\n\t\t// If link will be assigned, the state value can be considered flushed.\n\t\t// Otherwise, persist the pending changes.\n\t\tsetNextLinkValue( didToggleSettingForNewLink ? nextValue : undefined );\n\n\t\tif ( didToggleSettingForNewLink ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newUrl = prependHTTP( nextValue.url );\n\t\tconst format = createLinkFormat( {\n\t\t\turl: newUrl,\n\t\t\ttype: nextValue.type,\n\t\t\tid:\n\t\t\t\tnextValue.id !== undefined && nextValue.id !== null\n\t\t\t\t\t? String( nextValue.id )\n\t\t\t\t\t: undefined,\n\t\t\topensInNewWindow: nextValue.opensInNewTab,\n\t\t} );\n\n\t\tif ( isCollapsed( value ) && ! isActive ) {\n\t\t\tconst newText = nextValue.title || newUrl;\n\t\t\tconst toInsert = applyFormat(\n\t\t\t\tcreate( { text: newText } ),\n\t\t\t\tformat,\n\t\t\t\t0,\n\t\t\t\tnewText.length\n\t\t\t);\n\t\t\tonChange( insert( value, toInsert ) );\n\t\t} else {\n\t\t\tconst newValue = applyFormat( value, format );\n\t\t\tnewValue.start = newValue.end;\n\t\t\tnewValue.activeFormats = [];\n\t\t\tonChange( newValue );\n\t\t}\n\n\t\t// Focus should only be shifted back to the formatted segment when the\n\t\t// URL is submitted.\n\t\tif ( ! didToggleSetting ) {\n\t\t\tstopAddingLink();\n\t\t}\n\n\t\tif ( ! isValidHref( newUrl ) ) {\n\t\t\tspeak(\n\t\t\t\t__(\n\t\t\t\t\t'Warning: the link has been inserted but may have errors. Please test it.'\n\t\t\t\t),\n\t\t\t\t'assertive'\n\t\t\t);\n\t\t} else if ( isActive ) {\n\t\t\tspeak( __( 'Link edited.' ), 'assertive' );\n\t\t} else {\n\t\t\tspeak( __( 'Link inserted.' ), 'assertive' );\n\t\t}\n\t}\n\n\treturn (\n\t\t<Popover\n\t\t\tkey={ mountingKey }\n\t\t\tanchorRef={ anchorRef }\n\t\t\tfocusOnMount={ addingLink ? 'firstElement' : false }\n\t\t\tonClose={ stopAddingLink }\n\t\t\tposition=\"bottom center\"\n\t\t>\n\t\t\t<LinkControl\n\t\t\t\tvalue={ linkValue }\n\t\t\t\tonChange={ onChangeLink }\n\t\t\t\tforceIsEditingLink={ addingLink }\n\t\t\t/>\n\t\t</Popover>\n\t);\n}\n\nexport default withSpokenMessages( InlineLinkUI );\n"]}