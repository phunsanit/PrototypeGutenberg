{"version":3,"sources":["@wordpress/edit-post/src/store/effects.js"],"names":["saveMetaboxUnsubscribe","effects","SET_META_BOXES_PER_LOCATIONS","action","store","setTimeout","postType","getCurrentPostType","window","postboxes","page","add_postbox_toggles","wasSavingPost","isSavingPost","wasAutosavingPost","isAutosavingPost","hasActiveMetaBoxes","hasMetaBoxes","shouldTriggerMetaboxesSave","dispatch","REQUEST_META_BOX_UPDATES","tinyMCE","triggerSave","state","getState","post","getCurrentPost","additionalData","comment_status","ping_status","sticky","author","filter","Boolean","baseFormData","FormData","document","querySelector","formDataToMerge","map","location","formData","memo","currentFormData","key","value","append","forEach","url","_wpMetaBoxUrl","method","body","parse","then","SWITCH_MODE","mode","clearSelectedBlock","message"],"mappings":";;;;;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;;;;;;;AAEA,IAAIA,sBAAJ;AAEA,IAAMC,OAAO,GAAG;AACfC,EAAAA,4BADe,wCACeC,MADf,EACuBC,KADvB,EAC+B;AAC7C;AACA;AACA;AACA;AACA;AACAC,IAAAA,UAAU,CAAE,YAAM;AACjB,UAAMC,QAAQ,GAAG,kBAAQ,aAAR,EAAwBC,kBAAxB,EAAjB;;AACA,UAAKC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,KAA0BJ,QAA/B,EAA0C;AACzCE,QAAAA,MAAM,CAACC,SAAP,CAAiBE,mBAAjB,CAAsCL,QAAtC;AACA;AACD,KALS,CAAV;AAOA,QAAIM,aAAa,GAAG,kBAAQ,aAAR,EAAwBC,YAAxB,EAApB;AACA,QAAIC,iBAAiB,GAAG,kBAAQ,aAAR,EAAwBC,gBAAxB,EAAxB,CAd6C,CAgB7C;AACA;AACA;AACA;;AACA,QAAMC,kBAAkB,GAAG,kBAAQ,gBAAR,EAA2BC,YAA3B,EAA3B,CApB6C,CAsB7C;;AACA,QAAK,CAAC,CAAEjB,sBAAR,EAAiC;AAChCA,MAAAA,sBAAsB;AACtB,KAzB4C,CA2B7C;;;AACAA,IAAAA,sBAAsB,GAAG,qBAAW,YAAM;AACzC,UAAMa,YAAY,GAAG,kBAAQ,aAAR,EAAwBA,YAAxB,EAArB;AACA,UAAME,gBAAgB,GAAG,kBAAQ,aAAR,EAAwBA,gBAAxB,EAAzB,CAFyC,CAIzC;;AACA,UAAMG,0BAA0B,GAC/BF,kBAAkB,IAClBJ,aADA,IAEA,CAAEC,YAFF,IAGA,CAAEC,iBAJH,CALyC,CAWzC;;AACAF,MAAAA,aAAa,GAAGC,YAAhB;AACAC,MAAAA,iBAAiB,GAAGC,gBAApB;;AAEA,UAAKG,0BAAL,EAAkC;AACjCd,QAAAA,KAAK,CAACe,QAAN,CAAgB,qCAAhB;AACA;AACD,KAlBwB,CAAzB;AAmBA,GAhDc;AAiDfC,EAAAA,wBAjDe,oCAiDWjB,MAjDX,EAiDmBC,KAjDnB,EAiD2B;AACzC;AACA,QAAKI,MAAM,CAACa,OAAZ,EAAsB;AACrBb,MAAAA,MAAM,CAACa,OAAP,CAAeC,WAAf;AACA;;AAED,QAAMC,KAAK,GAAGnB,KAAK,CAACoB,QAAN,EAAd,CANyC,CAQzC;AACA;;AACA,QAAMC,IAAI,GAAG,kBAAQ,aAAR,EAAwBC,cAAxB,CAAwCH,KAAxC,CAAb;AACA,QAAMI,cAAc,GAAG,CACtBF,IAAI,CAACG,cAAL,GACG,CAAE,gBAAF,EAAoBH,IAAI,CAACG,cAAzB,CADH,GAEG,KAHmB,EAItBH,IAAI,CAACI,WAAL,GAAmB,CAAE,aAAF,EAAiBJ,IAAI,CAACI,WAAtB,CAAnB,GAAyD,KAJnC,EAKtBJ,IAAI,CAACK,MAAL,GAAc,CAAE,QAAF,EAAYL,IAAI,CAACK,MAAjB,CAAd,GAA0C,KALpB,EAMtBL,IAAI,CAACM,MAAL,GAAc,CAAE,aAAF,EAAiBN,IAAI,CAACM,MAAtB,CAAd,GAA+C,KANzB,EAOrBC,MAPqB,CAObC,OAPa,CAAvB,CAXyC,CAoBzC;;AACA,QAAMC,YAAY,GAAG,IAAI1B,MAAM,CAAC2B,QAAX,CACpBC,QAAQ,CAACC,aAAT,CAAwB,oBAAxB,CADoB,CAArB;AAGA,QAAMC,eAAe,IACpBJ,YADoB,0CAEjB,0CAA2BX,KAA3B,EAAmCgB,GAAnC,CACF,UAAEC,QAAF;AAAA,aACC,IAAIhC,MAAM,CAAC2B,QAAX,CAAqB,oCAAqBK,QAArB,CAArB,CADD;AAAA,KADE,CAFiB,EAArB,CAxByC,CAgCzC;;AACA,QAAMC,QAAQ,GAAG,oBAChBH,eADgB,EAEhB,UAAEI,IAAF,EAAQC,eAAR,EAA6B;AAAA,iDACEA,eADF;AAAA;;AAAA;AAC5B,4DAAgD;AAAA;AAAA,cAAlCC,GAAkC;AAAA,cAA7BC,KAA6B;;AAC/CH,UAAAA,IAAI,CAACI,MAAL,CAAaF,GAAb,EAAkBC,KAAlB;AACA;AAH2B;AAAA;AAAA;AAAA;AAAA;;AAI5B,aAAOH,IAAP;AACA,KAPe,EAQhB,IAAIlC,MAAM,CAAC2B,QAAX,EARgB,CAAjB;AAUAR,IAAAA,cAAc,CAACoB,OAAf,CAAwB;AAAA;AAAA,UAAIH,GAAJ;AAAA,UAASC,KAAT;;AAAA,aACvBJ,QAAQ,CAACK,MAAT,CAAiBF,GAAjB,EAAsBC,KAAtB,CADuB;AAAA,KAAxB,EA3CyC,CA+CzC;;AACA,2BAAU;AACTG,MAAAA,GAAG,EAAExC,MAAM,CAACyC,aADH;AAETC,MAAAA,MAAM,EAAE,MAFC;AAGTC,MAAAA,IAAI,EAAEV,QAHG;AAITW,MAAAA,KAAK,EAAE;AAJE,KAAV,EAKIC,IALJ,CAKU;AAAA,aAAMjD,KAAK,CAACe,QAAN,CAAgB,qCAAhB,CAAN;AAAA,KALV;AAMA,GAvGc;AAwGfmC,EAAAA,WAxGe,uBAwGFnD,MAxGE,EAwGO;AACrB;AACA,QAAKA,MAAM,CAACoD,IAAP,KAAgB,QAArB,EAAgC;AAC/B,0BAAU,mBAAV,EAAgCC,kBAAhC;AACA;;AAED,QAAMC,OAAO,GACZtD,MAAM,CAACoD,IAAP,KAAgB,QAAhB,GACG,cAAI,wBAAJ,CADH,GAEG,cAAI,sBAAJ,CAHJ;AAIA,qBAAOE,OAAP,EAAgB,WAAhB;AACA;AAnHc,CAAhB;eAsHexD,O","sourcesContent":["/**\n * External dependencies\n */\nimport { reduce } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { select, subscribe, dispatch } from '@wordpress/data';\nimport { speak } from '@wordpress/a11y';\nimport { __ } from '@wordpress/i18n';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { metaBoxUpdatesSuccess, requestMetaBoxUpdates } from './actions';\nimport { getActiveMetaBoxLocations } from './selectors';\nimport { getMetaBoxContainer } from '../utils/meta-boxes';\n\nlet saveMetaboxUnsubscribe;\n\nconst effects = {\n\tSET_META_BOXES_PER_LOCATIONS( action, store ) {\n\t\t// Allow toggling metaboxes panels\n\t\t// We need to wait for all scripts to load\n\t\t// If the meta box loads the post script, it will already trigger this.\n\t\t// After merge in Core, make sure to drop the timeout and update the postboxes script\n\t\t// to avoid the double binding.\n\t\tsetTimeout( () => {\n\t\t\tconst postType = select( 'core/editor' ).getCurrentPostType();\n\t\t\tif ( window.postboxes.page !== postType ) {\n\t\t\t\twindow.postboxes.add_postbox_toggles( postType );\n\t\t\t}\n\t\t} );\n\n\t\tlet wasSavingPost = select( 'core/editor' ).isSavingPost();\n\t\tlet wasAutosavingPost = select( 'core/editor' ).isAutosavingPost();\n\n\t\t// Meta boxes are initialized once at page load. It is not necessary to\n\t\t// account for updates on each state change.\n\t\t//\n\t\t// See: https://github.com/WordPress/WordPress/blob/5.1.1/wp-admin/includes/post.php#L2307-L2309\n\t\tconst hasActiveMetaBoxes = select( 'core/edit-post' ).hasMetaBoxes();\n\n\t\t// First remove any existing subscription in order to prevent multiple saves\n\t\tif ( !! saveMetaboxUnsubscribe ) {\n\t\t\tsaveMetaboxUnsubscribe();\n\t\t}\n\n\t\t// Save metaboxes when performing a full save on the post.\n\t\tsaveMetaboxUnsubscribe = subscribe( () => {\n\t\t\tconst isSavingPost = select( 'core/editor' ).isSavingPost();\n\t\t\tconst isAutosavingPost = select( 'core/editor' ).isAutosavingPost();\n\n\t\t\t// Save metaboxes on save completion, except for autosaves that are not a post preview.\n\t\t\tconst shouldTriggerMetaboxesSave =\n\t\t\t\thasActiveMetaBoxes &&\n\t\t\t\twasSavingPost &&\n\t\t\t\t! isSavingPost &&\n\t\t\t\t! wasAutosavingPost;\n\n\t\t\t// Save current state for next inspection.\n\t\t\twasSavingPost = isSavingPost;\n\t\t\twasAutosavingPost = isAutosavingPost;\n\n\t\t\tif ( shouldTriggerMetaboxesSave ) {\n\t\t\t\tstore.dispatch( requestMetaBoxUpdates() );\n\t\t\t}\n\t\t} );\n\t},\n\tREQUEST_META_BOX_UPDATES( action, store ) {\n\t\t// Saves the wp_editor fields\n\t\tif ( window.tinyMCE ) {\n\t\t\twindow.tinyMCE.triggerSave();\n\t\t}\n\n\t\tconst state = store.getState();\n\n\t\t// Additional data needed for backward compatibility.\n\t\t// If we do not provide this data, the post will be overridden with the default values.\n\t\tconst post = select( 'core/editor' ).getCurrentPost( state );\n\t\tconst additionalData = [\n\t\t\tpost.comment_status\n\t\t\t\t? [ 'comment_status', post.comment_status ]\n\t\t\t\t: false,\n\t\t\tpost.ping_status ? [ 'ping_status', post.ping_status ] : false,\n\t\t\tpost.sticky ? [ 'sticky', post.sticky ] : false,\n\t\t\tpost.author ? [ 'post_author', post.author ] : false,\n\t\t].filter( Boolean );\n\n\t\t// We gather all the metaboxes locations data and the base form data\n\t\tconst baseFormData = new window.FormData(\n\t\t\tdocument.querySelector( '.metabox-base-form' )\n\t\t);\n\t\tconst formDataToMerge = [\n\t\t\tbaseFormData,\n\t\t\t...getActiveMetaBoxLocations( state ).map(\n\t\t\t\t( location ) =>\n\t\t\t\t\tnew window.FormData( getMetaBoxContainer( location ) )\n\t\t\t),\n\t\t];\n\n\t\t// Merge all form data objects into a single one.\n\t\tconst formData = reduce(\n\t\t\tformDataToMerge,\n\t\t\t( memo, currentFormData ) => {\n\t\t\t\tfor ( const [ key, value ] of currentFormData ) {\n\t\t\t\t\tmemo.append( key, value );\n\t\t\t\t}\n\t\t\t\treturn memo;\n\t\t\t},\n\t\t\tnew window.FormData()\n\t\t);\n\t\tadditionalData.forEach( ( [ key, value ] ) =>\n\t\t\tformData.append( key, value )\n\t\t);\n\n\t\t// Save the metaboxes\n\t\tapiFetch( {\n\t\t\turl: window._wpMetaBoxUrl,\n\t\t\tmethod: 'POST',\n\t\t\tbody: formData,\n\t\t\tparse: false,\n\t\t} ).then( () => store.dispatch( metaBoxUpdatesSuccess() ) );\n\t},\n\tSWITCH_MODE( action ) {\n\t\t// Unselect blocks when we switch to the code editor.\n\t\tif ( action.mode !== 'visual' ) {\n\t\t\tdispatch( 'core/block-editor' ).clearSelectedBlock();\n\t\t}\n\n\t\tconst message =\n\t\t\taction.mode === 'visual'\n\t\t\t\t? __( 'Visual editor selected' )\n\t\t\t\t: __( 'Code editor selected' );\n\t\tspeak( message, 'assertive' );\n\t},\n};\n\nexport default effects;\n"]}