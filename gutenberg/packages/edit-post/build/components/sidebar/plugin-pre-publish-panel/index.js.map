{"version":3,"sources":["@wordpress/edit-post/src/components/sidebar/plugin-pre-publish-panel/index.js"],"names":["Fill","Slot","PluginPrePublishPanelFill","children","className","title","initialOpen","icon","PluginPrePublishPanel","context","ownProps"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AALA;;;sBAMuB,gCAAgB,uBAAhB,C;IAAfA,I,mBAAAA,I;IAAMC,I,mBAAAA,I;;AAEd,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA,MACjCC,QADiC,QACjCA,QADiC;AAAA,MAEjCC,SAFiC,QAEjCA,SAFiC;AAAA,MAGjCC,KAHiC,QAGjCA,KAHiC;AAAA,8BAIjCC,WAJiC;AAAA,MAIjCA,WAJiC,iCAInB,KAJmB;AAAA,MAKjCC,IALiC,QAKjCA,IALiC;AAAA,SAOjC,4BAAC,IAAD,QACC,4BAAC,qBAAD;AACC,IAAA,SAAS,EAAGH,SADb;AAEC,IAAA,WAAW,EAAGE,WAAW,IAAI,CAAED,KAFhC;AAGC,IAAA,KAAK,EAAGA,KAHT;AAIC,IAAA,IAAI,EAAGE;AAJR,KAMGJ,QANH,CADD,CAPiC;AAAA,CAAlC;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,IAAMK,qBAAqB,GAAG,sBAC7B,gCAAmB,UAAEC,OAAF,EAAWC,QAAX,EAAyB;AAC3C,SAAO;AACNH,IAAAA,IAAI,EAAEG,QAAQ,CAACH,IAAT,IAAiBE,OAAO,CAACF;AADzB,GAAP;AAGA,CAJD,CAD6B,EAM3BL,yBAN2B,CAA9B;AAQAM,qBAAqB,CAACP,IAAtB,GAA6BA,IAA7B;eAEeO,qB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createSlotFill, PanelBody } from '@wordpress/components';\nimport { compose } from '@wordpress/compose';\nimport { withPluginContext } from '@wordpress/plugins';\nconst { Fill, Slot } = createSlotFill( 'PluginPrePublishPanel' );\n\nconst PluginPrePublishPanelFill = ( {\n\tchildren,\n\tclassName,\n\ttitle,\n\tinitialOpen = false,\n\ticon,\n} ) => (\n\t<Fill>\n\t\t<PanelBody\n\t\t\tclassName={ className }\n\t\t\tinitialOpen={ initialOpen || ! title }\n\t\t\ttitle={ title }\n\t\t\ticon={ icon }\n\t\t>\n\t\t\t{ children }\n\t\t</PanelBody>\n\t</Fill>\n);\n\n/**\n * Renders provided content to the pre-publish side panel in the publish flow\n * (side panel that opens when a user first pushes \"Publish\" from the main editor).\n *\n * @param {Object}                props                                 Component props.\n * @param {string}                [props.className]                     An optional class name added to the panel.\n * @param {string}                [props.title]                         Title displayed at the top of the panel.\n * @param {boolean}               [props.initialOpen=false]             Whether to have the panel initially opened.\n *                                                                      When no title is provided it is always opened.\n * @param {WPBlockTypeIconRender} [props.icon=inherits from the plugin] The [Dashicon](https://developer.wordpress.org/resource/dashicons/)\n *                                                                      icon slug string, or an SVG WP element, to be rendered when\n *                                                                      the sidebar is pinned to toolbar.\n *\n * @example\n * <caption>ES5</caption>\n * ```js\n * // Using ES5 syntax\n * var __ = wp.i18n.__;\n * var PluginPrePublishPanel = wp.editPost.PluginPrePublishPanel;\n *\n * function MyPluginPrePublishPanel() {\n * \treturn wp.element.createElement(\n * \t\tPluginPrePublishPanel,\n * \t\t{\n * \t\t\tclassName: 'my-plugin-pre-publish-panel',\n * \t\t\ttitle: __( 'My panel title' ),\n * \t\t\tinitialOpen: true,\n * \t\t},\n * \t\t__( 'My panel content' )\n * \t);\n * }\n * ```\n *\n * @example\n * <caption>ESNext</caption>\n * ```jsx\n * // Using ESNext syntax\n * const { __ } = wp.i18n;\n * const { PluginPrePublishPanel } = wp.editPost;\n *\n * const MyPluginPrePublishPanel = () => (\n * \t<PluginPrePublishPanel\n * \t\tclassName=\"my-plugin-pre-publish-panel\"\n * \t\ttitle={ __( 'My panel title' ) }\n * \t\tinitialOpen={ true }\n * \t>\n * \t    { __( 'My panel content' ) }\n * \t</PluginPrePublishPanel>\n * );\n * ```\n *\n * @return {WPComponent} The component to be rendered.\n */\nconst PluginPrePublishPanel = compose(\n\twithPluginContext( ( context, ownProps ) => {\n\t\treturn {\n\t\t\ticon: ownProps.icon || context.icon,\n\t\t};\n\t} )\n)( PluginPrePublishPanelFill );\n\nPluginPrePublishPanel.Slot = Slot;\n\nexport default PluginPrePublishPanel;\n"]}