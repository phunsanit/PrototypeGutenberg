{"version":3,"sources":["@wordpress/edit-post/src/hooks/validate-multiple-use/index.js"],"names":["enhance","select","block","multiple","name","blocks","getBlocks","firstOfSameType","isInvalid","clientId","originalBlockClientId","dispatch","selectFirst","selectBlock","withMultipleValidation","BlockEdit","props","blockType","outboundType","getOutboundType","minHeight","onReplace","attributes","title","blockName","transform","type","length"],"mappings":";;;;;;;;;;AAGA;;AAKA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AApBA;;;;AAKA;;;AAiBA,IAAMA,OAAO,GAAG;AACf;;;;;;;;;;;AAWA,sBAAY,UAAEC,MAAF,EAAUC,KAAV,EAAqB;AAChC,MAAMC,QAAQ,GAAG,6BAAiBD,KAAK,CAACE,IAAvB,EAA6B,UAA7B,EAAyC,IAAzC,CAAjB,CADgC,CAGhC;AACA;;AACA,MAAKD,QAAL,EAAgB;AACf,WAAO,EAAP;AACA,GAP+B,CAShC;AACA;;;AACA,MAAME,MAAM,GAAGJ,MAAM,CAAE,mBAAF,CAAN,CAA8BK,SAA9B,EAAf;AACA,MAAMC,eAAe,GAAG,kBACvBF,MADuB,EAEvB;AAAA,QAAID,IAAJ,QAAIA,IAAJ;AAAA,WAAgBF,KAAK,CAACE,IAAN,KAAeA,IAA/B;AAAA,GAFuB,CAAxB;AAIA,MAAMI,SAAS,GACdD,eAAe,IAAIA,eAAe,CAACE,QAAhB,KAA6BP,KAAK,CAACO,QADvD;AAEA,SAAO;AACNC,IAAAA,qBAAqB,EAAEF,SAAS,IAAID,eAAe,CAACE;AAD9C,GAAP;AAGA,CArBD,CAZe,EAkCf,wBAAc,UAAEE,QAAF;AAAA,MAAcD,qBAAd,SAAcA,qBAAd;AAAA,SAA6C;AAC1DE,IAAAA,WAAW,EAAE;AAAA,aACZD,QAAQ,CAAE,mBAAF,CAAR,CAAgCE,WAAhC,CACCH,qBADD,CADY;AAAA;AAD6C,GAA7C;AAAA,CAAd,CAlCe,CAAhB;AA0CA,IAAMI,sBAAsB,GAAG,yCAA4B,UAAEC,SAAF,EAAiB;AAC3E,SAAOf,OAAO,CAAE,iBAAwD;AAAA,QAApDU,qBAAoD,SAApDA,qBAAoD;AAAA,QAA7BE,WAA6B,SAA7BA,WAA6B;AAAA,QAAbI,KAAa;;AACvE,QAAK,CAAEN,qBAAP,EAA+B;AAC9B,aAAO,4BAAC,SAAD,EAAgBM,KAAhB,CAAP;AACA;;AAED,QAAMC,SAAS,GAAG,0BAAcD,KAAK,CAACZ,IAApB,CAAlB;AACA,QAAMc,YAAY,GAAGC,eAAe,CAAEH,KAAK,CAACZ,IAAR,CAApC;AAEA,WAAO,CACN;AAAK,MAAA,GAAG,EAAC,iBAAT;AAA2B,MAAA,KAAK,EAAG;AAAEgB,QAAAA,SAAS,EAAE;AAAb;AAAnC,OACC,4BAAC,SAAD;AAAW,MAAA,GAAG,EAAC;AAAf,OAAiCJ,KAAjC,EADD,CADM,EAIN,4BAAC,oBAAD;AACC,MAAA,GAAG,EAAC,sBADL;AAEC,MAAA,OAAO,EAAG,CACT,4BAAC,kBAAD;AACC,QAAA,GAAG,EAAC,eADL;AAEC,QAAA,WAAW,MAFZ;AAGC,QAAA,OAAO,EAAGJ;AAHX,SAKG,cAAI,eAAJ,CALH,CADS,EAQT,4BAAC,kBAAD;AACC,QAAA,GAAG,EAAC,QADL;AAEC,QAAA,WAAW,MAFZ;AAGC,QAAA,OAAO,EAAG;AAAA,iBAAMI,KAAK,CAACK,SAAN,CAAiB,EAAjB,CAAN;AAAA;AAHX,SAKG,cAAI,QAAJ,CALH,CARS,EAeTH,YAAY,IACX,4BAAC,kBAAD;AACC,QAAA,GAAG,EAAC,WADL;AAEC,QAAA,WAAW,MAFZ;AAGC,QAAA,OAAO,EAAG;AAAA,iBACTF,KAAK,CAACK,SAAN,CACC,yBACCH,YAAY,CAACd,IADd,EAECY,KAAK,CAACM,UAFP,CADD,CADS;AAAA;AAHX,SAYG,cAAI,iBAAJ,CAZH,OAY+BJ,YAAY,CAACK,KAZ5C,CAhBQ;AAFX,OAmCC,4CAAUN,SAAS,CAACM,KAApB,OAnCD,EAoCG,cAAI,mCAAJ,CApCH,CAJM,CAAP;AA2CA,GAnDa,CAAd;AAoDA,CArD8B,EAqD5B,wBArD4B,CAA/B;AAuDA;;;;;;;;;AAQA,SAASJ,eAAT,CAA0BK,SAA1B,EAAsC;AACrC;AACA,MAAMC,SAAS,GAAG,2BACjB,gCAAoB,IAApB,EAA0BD,SAA1B,CADiB,EAEjB;AAAA,QAAIE,IAAJ,SAAIA,IAAJ;AAAA,QAAUrB,MAAV,SAAUA,MAAV;AAAA,WAAwBqB,IAAI,KAAK,OAAT,IAAoBrB,MAAM,CAACsB,MAAP,KAAkB,CAA9D;AAAA,GAFiB,CAE+C;AAF/C,GAAlB;;AAKA,MAAK,CAAEF,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,SAAO,0BAAcA,SAAS,CAACpB,MAAV,CAAkB,CAAlB,CAAd,CAAP;AACA;;AAED,sBACC,kBADD,EAEC,+DAFD,EAGCS,sBAHD","sourcesContent":["/**\n * External dependencies\n */\nimport { find } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tcreateBlock,\n\tfindTransform,\n\tgetBlockTransforms,\n\tgetBlockType,\n\thasBlockSupport,\n} from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { Warning } from '@wordpress/block-editor';\nimport { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\nimport { compose, createHigherOrderComponent } from '@wordpress/compose';\n\nconst enhance = compose(\n\t/**\n\t * For blocks whose block type doesn't support `multiple`, provides the\n\t * wrapped component with `originalBlockClientId` -- a reference to the\n\t * first block of the same type in the content -- if and only if that\n\t * \"original\" block is not the current one. Thus, an inexisting\n\t * `originalBlockClientId` prop signals that the block is valid.\n\t *\n\t * @param {WPComponent} WrappedBlockEdit A filtered BlockEdit instance.\n\t *\n\t * @return {WPComponent} Enhanced component with merged state data props.\n\t */\n\twithSelect( ( select, block ) => {\n\t\tconst multiple = hasBlockSupport( block.name, 'multiple', true );\n\n\t\t// For block types with `multiple` support, there is no \"original\n\t\t// block\" to be found in the content, as the block itself is valid.\n\t\tif ( multiple ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Otherwise, only pass `originalBlockClientId` if it refers to a different\n\t\t// block from the current one.\n\t\tconst blocks = select( 'core/block-editor' ).getBlocks();\n\t\tconst firstOfSameType = find(\n\t\t\tblocks,\n\t\t\t( { name } ) => block.name === name\n\t\t);\n\t\tconst isInvalid =\n\t\t\tfirstOfSameType && firstOfSameType.clientId !== block.clientId;\n\t\treturn {\n\t\t\toriginalBlockClientId: isInvalid && firstOfSameType.clientId,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { originalBlockClientId } ) => ( {\n\t\tselectFirst: () =>\n\t\t\tdispatch( 'core/block-editor' ).selectBlock(\n\t\t\t\toriginalBlockClientId\n\t\t\t),\n\t} ) )\n);\n\nconst withMultipleValidation = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn enhance( ( { originalBlockClientId, selectFirst, ...props } ) => {\n\t\tif ( ! originalBlockClientId ) {\n\t\t\treturn <BlockEdit { ...props } />;\n\t\t}\n\n\t\tconst blockType = getBlockType( props.name );\n\t\tconst outboundType = getOutboundType( props.name );\n\n\t\treturn [\n\t\t\t<div key=\"invalid-preview\" style={ { minHeight: '60px' } }>\n\t\t\t\t<BlockEdit key=\"block-edit\" { ...props } />\n\t\t\t</div>,\n\t\t\t<Warning\n\t\t\t\tkey=\"multiple-use-warning\"\n\t\t\t\tactions={ [\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey=\"find-original\"\n\t\t\t\t\t\tisSecondary\n\t\t\t\t\t\tonClick={ selectFirst }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Find original' ) }\n\t\t\t\t\t</Button>,\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey=\"remove\"\n\t\t\t\t\t\tisSecondary\n\t\t\t\t\t\tonClick={ () => props.onReplace( [] ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Remove' ) }\n\t\t\t\t\t</Button>,\n\t\t\t\t\toutboundType && (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey=\"transform\"\n\t\t\t\t\t\t\tisSecondary\n\t\t\t\t\t\t\tonClick={ () =>\n\t\t\t\t\t\t\t\tprops.onReplace(\n\t\t\t\t\t\t\t\t\tcreateBlock(\n\t\t\t\t\t\t\t\t\t\toutboundType.name,\n\t\t\t\t\t\t\t\t\t\tprops.attributes\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ __( 'Transform into:' ) } { outboundType.title }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t),\n\t\t\t\t] }\n\t\t\t>\n\t\t\t\t<strong>{ blockType.title }: </strong>\n\t\t\t\t{ __( 'This block can only be used once.' ) }\n\t\t\t</Warning>,\n\t\t];\n\t} );\n}, 'withMultipleValidation' );\n\n/**\n * Given a base block name, returns the default block type to which to offer\n * transforms.\n *\n * @param {string} blockName Base block name.\n *\n * @return {?Object} The chosen default block type.\n */\nfunction getOutboundType( blockName ) {\n\t// Grab the first outbound transform\n\tconst transform = findTransform(\n\t\tgetBlockTransforms( 'to', blockName ),\n\t\t( { type, blocks } ) => type === 'block' && blocks.length === 1 // What about when .length > 1?\n\t);\n\n\tif ( ! transform ) {\n\t\treturn null;\n\t}\n\n\treturn getBlockType( transform.blocks[ 0 ] );\n}\n\naddFilter(\n\t'editor.BlockEdit',\n\t'core/edit-post/validate-multiple-use/with-multiple-validation',\n\twithMultipleValidation\n);\n"]}