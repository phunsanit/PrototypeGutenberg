{"version":3,"sources":["@wordpress/edit-post/src/store/selectors.js"],"names":["createSelector","get","includes","some","flatten","values","createRegistrySelector","getEditorMode","state","getPreference","isEditorSidebarOpened","select","activeGeneralSidebar","getActiveComplementaryArea","isPluginSidebarOpened","getActiveGeneralSidebarName","getPreferences","preferences","preferenceKey","defaultValue","value","undefined","isPublishSidebarOpened","publishSidebarActive","isEditorPanelRemoved","panelName","removedPanels","isEditorPanelEnabled","panels","isEditorPanelOpened","isModalActive","modalName","activeModal","isFeatureActive","feature","features","isPluginItemPinned","pluginName","isItemPinned","getActiveMetaBoxLocations","Object","keys","metaBoxes","locations","filter","location","isMetaBoxLocationActive","isMetaBoxLocationVisible","getMetaBoxesPerLocation","id","length","getAllMetaBoxes","hasMetaBoxes","isSavingMetaBoxes","isSaving","__experimentalGetPreviewDeviceType","deviceType"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { get, includes, some, flatten, values } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Returns the current editing mode.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Editing mode.\n */\nexport function getEditorMode( state ) {\n\treturn getPreference( state, 'editorMode', 'visual' );\n}\n\n/**\n * Returns true if the editor sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the editor sidebar is opened.\n */\nexport const isEditorSidebarOpened = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst activeGeneralSidebar = select(\n\t\t\t'core/interface'\n\t\t).getActiveComplementaryArea( 'core/edit-post' );\n\t\treturn includes(\n\t\t\t[ 'edit-post/document', 'edit-post/block' ],\n\t\t\tactiveGeneralSidebar\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the plugin sidebar is opened.\n *\n * @param {Object} state Global application state\n * @return {boolean}     Whether the plugin sidebar is opened.\n */\nexport const isPluginSidebarOpened = createRegistrySelector(\n\t( select ) => () => {\n\t\tconst activeGeneralSidebar = select(\n\t\t\t'core/interface'\n\t\t).getActiveComplementaryArea( 'core/edit-post' );\n\t\treturn (\n\t\t\t!! activeGeneralSidebar &&\n\t\t\t! includes(\n\t\t\t\t[ 'edit-post/document', 'edit-post/block' ],\n\t\t\t\tactiveGeneralSidebar\n\t\t\t)\n\t\t);\n\t}\n);\n\n/**\n * Returns the current active general sidebar name, or null if there is no\n * general sidebar active. The active general sidebar is a unique name to\n * identify either an editor or plugin sidebar.\n *\n * Examples:\n *\n *  - `edit-post/document`\n *  - `my-plugin/insert-image-sidebar`\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Active general sidebar name.\n */\nexport const getActiveGeneralSidebarName = createRegistrySelector(\n\t( select ) => () => {\n\t\treturn select( 'core/interface' ).getActiveComplementaryArea(\n\t\t\t'core/edit-post'\n\t\t);\n\t}\n);\n\n/**\n * Returns the preferences (these preferences are persisted locally).\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Preferences Object.\n */\nexport function getPreferences( state ) {\n\treturn state.preferences;\n}\n\n/**\n *\n * @param {Object} state         Global application state.\n * @param {string} preferenceKey Preference Key.\n * @param {*}      defaultValue  Default Value.\n *\n * @return {*} Preference Value.\n */\nexport function getPreference( state, preferenceKey, defaultValue ) {\n\tconst preferences = getPreferences( state );\n\tconst value = preferences[ preferenceKey ];\n\treturn value === undefined ? defaultValue : value;\n}\n\n/**\n * Returns true if the publish sidebar is opened.\n *\n * @param {Object} state Global application state\n *\n * @return {boolean} Whether the publish sidebar is open.\n */\nexport function isPublishSidebarOpened( state ) {\n\treturn state.publishSidebarActive;\n}\n\n/**\n * Returns true if the given panel was programmatically removed, or false otherwise.\n * All panels are not removed by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is removed.\n */\nexport function isEditorPanelRemoved( state, panelName ) {\n\treturn includes( state.removedPanels, panelName );\n}\n\n/**\n * Returns true if the given panel is enabled, or false otherwise. Panels are\n * enabled by default.\n *\n * @param {Object} state     Global application state.\n * @param {string} panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is enabled.\n */\nexport function isEditorPanelEnabled( state, panelName ) {\n\tconst panels = getPreference( state, 'panels' );\n\n\treturn (\n\t\t! isEditorPanelRemoved( state, panelName ) &&\n\t\tget( panels, [ panelName, 'enabled' ], true )\n\t);\n}\n\n/**\n * Returns true if the given panel is open, or false otherwise. Panels are\n * closed by default.\n *\n * @param  {Object}  state     Global application state.\n * @param  {string}  panelName A string that identifies the panel.\n *\n * @return {boolean} Whether or not the panel is open.\n */\nexport function isEditorPanelOpened( state, panelName ) {\n\tconst panels = getPreference( state, 'panels' );\n\treturn (\n\t\tget( panels, [ panelName ] ) === true ||\n\t\tget( panels, [ panelName, 'opened' ] ) === true\n\t);\n}\n\n/**\n * Returns true if a modal is active, or false otherwise.\n *\n * @param  {Object}  state \t   Global application state.\n * @param  {string}  modalName A string that uniquely identifies the modal.\n *\n * @return {boolean} Whether the modal is active.\n */\nexport function isModalActive( state, modalName ) {\n\treturn state.activeModal === modalName;\n}\n\n/**\n * Returns whether the given feature is enabled or not.\n *\n * @param {Object} state   Global application state.\n * @param {string} feature Feature slug.\n *\n * @return {boolean} Is active.\n */\nexport function isFeatureActive( state, feature ) {\n\treturn get( state.preferences.features, [ feature ], false );\n}\n\n/**\n * Returns true if the plugin item is pinned to the header.\n * When the value is not set it defaults to true.\n *\n * @param  {Object}  state      Global application state.\n * @param  {string}  pluginName Plugin item name.\n *\n * @return {boolean} Whether the plugin item is pinned.\n */\nexport const isPluginItemPinned = createRegistrySelector(\n\t( select ) => ( pluginName ) => {\n\t\treturn select( 'core/interface' ).isItemPinned(\n\t\t\t'core/edit-post',\n\t\t\tpluginName\n\t\t);\n\t}\n);\n\n/**\n * Returns an array of active meta box locations.\n *\n * @param {Object} state Post editor state.\n *\n * @return {string[]} Active meta box locations.\n */\nexport const getActiveMetaBoxLocations = createSelector(\n\t( state ) => {\n\t\treturn Object.keys( state.metaBoxes.locations ).filter( ( location ) =>\n\t\t\tisMetaBoxLocationActive( state, location )\n\t\t);\n\t},\n\t( state ) => [ state.metaBoxes.locations ]\n);\n\n/**\n * Returns true if a metabox location is active and visible\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active and visible.\n */\nexport function isMetaBoxLocationVisible( state, location ) {\n\treturn (\n\t\tisMetaBoxLocationActive( state, location ) &&\n\t\tsome( getMetaBoxesPerLocation( state, location ), ( { id } ) => {\n\t\t\treturn isEditorPanelEnabled( state, `meta-box-${ id }` );\n\t\t} )\n\t);\n}\n\n/**\n * Returns true if there is an active meta box in the given location, or false\n * otherwise.\n *\n * @param {Object} state    Post editor state.\n * @param {string} location Meta box location to test.\n *\n * @return {boolean} Whether the meta box location is active.\n */\nexport function isMetaBoxLocationActive( state, location ) {\n\tconst metaBoxes = getMetaBoxesPerLocation( state, location );\n\treturn !! metaBoxes && metaBoxes.length !== 0;\n}\n\n/**\n * Returns the list of all the available meta boxes for a given location.\n *\n * @param {Object} state    Global application state.\n * @param {string} location Meta box location to test.\n *\n * @return {?Array} List of meta boxes.\n */\nexport function getMetaBoxesPerLocation( state, location ) {\n\treturn state.metaBoxes.locations[ location ];\n}\n\n/**\n * Returns the list of all the available meta boxes.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} List of meta boxes.\n */\nexport const getAllMetaBoxes = createSelector(\n\t( state ) => {\n\t\treturn flatten( values( state.metaBoxes.locations ) );\n\t},\n\t( state ) => [ state.metaBoxes.locations ]\n);\n\n/**\n * Returns true if the post is using Meta Boxes\n *\n * @param  {Object} state Global application state\n *\n * @return {boolean} Whether there are metaboxes or not.\n */\nexport function hasMetaBoxes( state ) {\n\treturn getActiveMetaBoxLocations( state ).length > 0;\n}\n\n/**\n * Returns true if the Meta Boxes are being saved.\n *\n * @param   {Object}  state Global application state.\n *\n * @return {boolean} Whether the metaboxes are being saved.\n */\nexport function isSavingMetaBoxes( state ) {\n\treturn state.metaBoxes.isSaving;\n}\n\n/**\n * Returns the current editing canvas device type.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Device type.\n */\nexport function __experimentalGetPreviewDeviceType( state ) {\n\treturn state.deviceType;\n}\n"]}