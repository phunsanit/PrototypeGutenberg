{"version":3,"sources":["@wordpress/edit-post/src/store/actions.js"],"names":["openGeneralSidebar","closeGeneralSidebar","castArray","dispatch","name","openModal","type","closeModal","openPublishSidebar","closePublishSidebar","togglePublishSidebar","toggleEditorPanelEnabled","panelName","toggleEditorPanelOpened","removeEditorPanel","toggleFeature","feature","switchEditorMode","mode","togglePinnedPluginItem","pluginName","hideBlockTypes","blockNames","updatePreferredStyleVariations","blockName","blockStyle","__experimentalUpdateLocalAutosaveInterval","interval","showBlockTypes","setAvailableMetaBoxesPerLocation","metaBoxesPerLocation","requestMetaBoxUpdates","metaBoxUpdatesSuccess","__experimentalSetPreviewDeviceType","deviceType"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { dispatch } from '@wordpress/data-controls';\n\n/**\n * Returns an action object used in signalling that the user opened an editor sidebar.\n *\n * @param {?string} name Sidebar name to be opened.\n *\n * @yield {Object} Action object.\n */\nexport function* openGeneralSidebar( name ) {\n\tyield dispatch(\n\t\t'core/interface',\n\t\t'enableComplementaryArea',\n\t\t'core/edit-post',\n\t\tname\n\t);\n}\n\n/**\n * Returns an action object signalling that the user closed the sidebar.\n *\n * @yield {Object} Action object.\n */\nexport function* closeGeneralSidebar() {\n\tyield dispatch(\n\t\t'core/interface',\n\t\t'disableComplementaryArea',\n\t\t'core/edit-post'\n\t);\n}\n\n/**\n * Returns an action object used in signalling that the user opened a modal.\n *\n * @param {string} name A string that uniquely identifies the modal.\n *\n * @return {Object} Action object.\n */\nexport function openModal( name ) {\n\treturn {\n\t\ttype: 'OPEN_MODAL',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object signalling that the user closed a modal.\n *\n * @return {Object} Action object.\n */\nexport function closeModal() {\n\treturn {\n\t\ttype: 'CLOSE_MODAL',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user opened the publish\n * sidebar.\n *\n * @return {Object} Action object\n */\nexport function openPublishSidebar() {\n\treturn {\n\t\ttype: 'OPEN_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user closed the\n * publish sidebar.\n *\n * @return {Object} Action object.\n */\nexport function closePublishSidebar() {\n\treturn {\n\t\ttype: 'CLOSE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user toggles the publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function togglePublishSidebar() {\n\treturn {\n\t\ttype: 'TOGGLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to enable or disable a panel in the editor.\n *\n * @param {string} panelName A string that identifies the panel to enable or disable.\n *\n * @return {Object} Action object.\n */\nexport function toggleEditorPanelEnabled( panelName ) {\n\treturn {\n\t\ttype: 'TOGGLE_PANEL_ENABLED',\n\t\tpanelName,\n\t};\n}\n\n/**\n * Returns an action object used to open or close a panel in the editor.\n *\n * @param {string} panelName A string that identifies the panel to open or close.\n *\n * @return {Object} Action object.\n */\nexport function toggleEditorPanelOpened( panelName ) {\n\treturn {\n\t\ttype: 'TOGGLE_PANEL_OPENED',\n\t\tpanelName,\n\t};\n}\n\n/**\n * Returns an action object used to remove a panel from the editor.\n *\n * @param {string} panelName A string that identifies the panel to remove.\n *\n * @return {Object} Action object.\n */\nexport function removeEditorPanel( panelName ) {\n\treturn {\n\t\ttype: 'REMOVE_PANEL',\n\t\tpanelName,\n\t};\n}\n\n/**\n * Returns an action object used to toggle a feature flag.\n *\n * @param {string} feature Feature name.\n *\n * @return {Object} Action object.\n */\nexport function toggleFeature( feature ) {\n\treturn {\n\t\ttype: 'TOGGLE_FEATURE',\n\t\tfeature,\n\t};\n}\n\nexport function switchEditorMode( mode ) {\n\treturn {\n\t\ttype: 'SWITCH_MODE',\n\t\tmode,\n\t};\n}\n\n/**\n * Returns an action object used to toggle a plugin name flag.\n *\n * @param {string} pluginName Plugin name.\n *\n * @return {Object} Action object.\n */\nexport function togglePinnedPluginItem( pluginName ) {\n\treturn {\n\t\ttype: 'TOGGLE_PINNED_PLUGIN_ITEM',\n\t\tpluginName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block types by the given\n * name(s) should be hidden.\n *\n * @param {string[]} blockNames Names of block types to hide.\n *\n * @return {Object} Action object.\n */\nexport function hideBlockTypes( blockNames ) {\n\treturn {\n\t\ttype: 'HIDE_BLOCK_TYPES',\n\t\tblockNames: castArray( blockNames ),\n\t};\n}\n\n/**\n * Returns an action object used in signaling that a style should be auto-applied when a block is created.\n *\n * @param {string}  blockName  Name of the block.\n * @param {?string} blockStyle Name of the style that should be auto applied. If undefined, the \"auto apply\" setting of the block is removed.\n *\n * @return {Object} Action object.\n */\nexport function updatePreferredStyleVariations( blockName, blockStyle ) {\n\treturn {\n\t\ttype: 'UPDATE_PREFERRED_STYLE_VARIATIONS',\n\t\tblockName,\n\t\tblockStyle,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the editor should attempt\n * to locally autosave the current post every `interval` seconds.\n *\n * @param {number} interval The new interval, in seconds.\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateLocalAutosaveInterval( interval ) {\n\treturn {\n\t\ttype: 'UPDATE_LOCAL_AUTOSAVE_INTERVAL',\n\t\tinterval,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block types by the given\n * name(s) should be shown.\n *\n * @param {string[]} blockNames Names of block types to show.\n *\n * @return {Object} Action object.\n */\nexport function showBlockTypes( blockNames ) {\n\treturn {\n\t\ttype: 'SHOW_BLOCK_TYPES',\n\t\tblockNames: castArray( blockNames ),\n\t};\n}\n\n/**\n * Returns an action object used in signaling\n * what Meta boxes are available in which location.\n *\n * @param {Object} metaBoxesPerLocation Meta boxes per location.\n *\n * @return {Object} Action object.\n */\nexport function setAvailableMetaBoxesPerLocation( metaBoxesPerLocation ) {\n\treturn {\n\t\ttype: 'SET_META_BOXES_PER_LOCATIONS',\n\t\tmetaBoxesPerLocation,\n\t};\n}\n\n/**\n * Returns an action object used to request meta box update.\n *\n * @return {Object} Action object.\n */\nexport function requestMetaBoxUpdates() {\n\treturn {\n\t\ttype: 'REQUEST_META_BOX_UPDATES',\n\t};\n}\n\n/**\n * Returns an action object used signal a successful meta box update.\n *\n * @return {Object} Action object.\n */\nexport function metaBoxUpdatesSuccess() {\n\treturn {\n\t\ttype: 'META_BOX_UPDATES_SUCCESS',\n\t};\n}\n\n/**\n * Returns an action object used to toggle the width of the editing canvas.\n *\n * @param {string} deviceType\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSetPreviewDeviceType( deviceType ) {\n\treturn {\n\t\ttype: 'SET_PREVIEW_DEVICE_TYPE',\n\t\tdeviceType,\n\t};\n}\n"]}