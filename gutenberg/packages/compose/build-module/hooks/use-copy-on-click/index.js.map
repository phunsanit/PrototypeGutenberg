{"version":3,"sources":["@wordpress/compose/src/hooks/use-copy-on-click/index.js"],"names":["Clipboard","useRef","useEffect","useState","useCopyOnClick","ref","text","timeout","clipboard","hasCopied","setHasCopied","timeoutId","current","container","on","clearSelection","clearTimeout","setTimeout","destroy"],"mappings":";;AAAA;;;AAGA,OAAOA,SAAP,MAAsB,WAAtB;AAEA;;;;AAGA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,oBAA5C;AAEA;;;;;;;;;;;;AAWA,eAAe,SAASC,cAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqD;AAAA,MAAjBC,OAAiB,uEAAP,IAAO;AACnE,MAAMC,SAAS,GAAGP,MAAM,EAAxB;;AADmE,kBAE/BE,QAAQ,CAAE,KAAF,CAFuB;AAAA;AAAA,MAE3DM,SAF2D;AAAA,MAEhDC,YAFgD;;AAInER,EAAAA,SAAS,CAAE,YAAM;AAChB,QAAIS,SAAJ,CADgB,CAGhB;;AACAH,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAAIZ,SAAJ,CAAeK,GAAG,CAACO,OAAnB,EAA4B;AAC/CN,MAAAA,IAAI,EAAE;AAAA,eAAQ,OAAOA,KAAP,KAAgB,UAAhB,GAA6BA,KAAI,EAAjC,GAAsCA,KAA9C;AAAA,OADyC;AAE/CO,MAAAA,SAAS,EAAER,GAAG,CAACO;AAFgC,KAA5B,CAApB;AAKAJ,IAAAA,SAAS,CAACI,OAAV,CAAkBE,EAAlB,CAAsB,SAAtB,EAAiC,gBAA0B;AAAA,UAAtBC,cAAsB,QAAtBA,cAAsB;AAC1D;AACA;AACA;AACAA,MAAAA,cAAc;;AAEd,UAAKR,OAAL,EAAe;AACdG,QAAAA,YAAY,CAAE,IAAF,CAAZ;AACAM,QAAAA,YAAY,CAAEL,SAAF,CAAZ;AACAA,QAAAA,SAAS,GAAGM,UAAU,CAAE;AAAA,iBAAMP,YAAY,CAAE,KAAF,CAAlB;AAAA,SAAF,EAA+BH,OAA/B,CAAtB;AACA;AACD,KAXD;AAaA,WAAO,YAAM;AACZC,MAAAA,SAAS,CAACI,OAAV,CAAkBM,OAAlB;AACAF,MAAAA,YAAY,CAAEL,SAAF,CAAZ;AACA,KAHD;AAIA,GA1BQ,EA0BN,CAAEL,KAAF,EAAQC,OAAR,EAAiBG,YAAjB,CA1BM,CAAT;AA4BA,SAAOD,SAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport Clipboard from 'clipboard';\n\n/**\n * WordPress dependencies\n */\nimport { useRef, useEffect, useState } from '@wordpress/element';\n\n/**\n * Copies the text to the clipboard when the element is clicked.\n *\n * @param {Object}          ref     Reference with the element.\n * @param {string|Function} text    The text to copy.\n * @param {number}          timeout Optional timeout to reset the returned\n *                                  state. 4 seconds by default.\n *\n * @return {boolean} Whether or not the text has been copied. Resets after the\n *                   timeout.\n */\nexport default function useCopyOnClick( ref, text, timeout = 4000 ) {\n\tconst clipboard = useRef();\n\tconst [ hasCopied, setHasCopied ] = useState( false );\n\n\tuseEffect( () => {\n\t\tlet timeoutId;\n\n\t\t// Clipboard listens to click events.\n\t\tclipboard.current = new Clipboard( ref.current, {\n\t\t\ttext: () => ( typeof text === 'function' ? text() : text ),\n\t\t\tcontainer: ref.current,\n\t\t} );\n\n\t\tclipboard.current.on( 'success', ( { clearSelection } ) => {\n\t\t\t// Clearing selection will move focus back to the triggering button,\n\t\t\t// ensuring that it is not reset to the body, and further that it is\n\t\t\t// kept within the rendered node.\n\t\t\tclearSelection();\n\n\t\t\tif ( timeout ) {\n\t\t\t\tsetHasCopied( true );\n\t\t\t\tclearTimeout( timeoutId );\n\t\t\t\ttimeoutId = setTimeout( () => setHasCopied( false ), timeout );\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tclipboard.current.destroy();\n\t\t\tclearTimeout( timeoutId );\n\t\t};\n\t}, [ text, timeout, setHasCopied ] );\n\n\treturn hasCopied;\n}\n"]}