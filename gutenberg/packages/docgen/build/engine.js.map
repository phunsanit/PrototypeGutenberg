{"version":3,"sources":["@wordpress/docgen/src/engine.js"],"names":["babel","require","flatten","getIntermediateRepresentation","getAST","source","parse","program","getExportTokens","ast","body","filter","node","some","declaration","type","engine","path","code","getIRFromPath","result","tokens","ir","map","token","module","exports"],"mappings":";;AAAA;;;AAGA,IAAMA,KAAK,GAAGC,OAAO,CAAE,aAAF,CAArB;;eACoBA,OAAO,CAAE,QAAF,C;IAAnBC,O,YAAAA,O;AAER;;;;;AAGA,IAAMC,6BAA6B,GAAGF,OAAO,CAAE,mCAAF,CAA7C;;AAEA,IAAMG,MAAM,GAAG,SAATA,MAAS,CAAEC,MAAF,EAAc;AAC5B,SAAOL,KAAK,CAACM,KAAN,CAAaD,MAAM,IAAI,EAAvB,EAA4BE,OAAnC;AACA,CAFD;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAEC,GAAF;AAAA,SACvBA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAiB,UAAEC,IAAF;AAAA,WAChB,CACC,wBADD,EAEC,0BAFD,EAGC,sBAHD,EAIEC,IAJF,CAIQ,UAAEC,WAAF;AAAA,aAAmBA,WAAW,KAAKF,IAAI,CAACG,IAAxC;AAAA,KAJR,CADgB;AAAA,GAAjB,CADuB;AAAA,CAAxB;;AASA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAEC,IAAF,EAAQC,IAAR,EAA4C;AAAA,MAA9BC,aAA8B,uEAAd,YAAM,CAAE,CAAM;AAC1D,MAAMC,MAAM,GAAG,EAAf;AACAA,EAAAA,MAAM,CAACX,GAAP,GAAaL,MAAM,CAAEc,IAAF,CAAnB;AACAE,EAAAA,MAAM,CAACC,MAAP,GAAgBb,eAAe,CAAEY,MAAM,CAACX,GAAT,CAA/B;AACAW,EAAAA,MAAM,CAACE,EAAP,GAAYpB,OAAO,CAClBkB,MAAM,CAACC,MAAP,CAAcE,GAAd,CAAmB,UAAEC,KAAF;AAAA,WAClBrB,6BAA6B,CAC5Bc,IAD4B,EAE5BO,KAF4B,EAG5BJ,MAAM,CAACX,GAHqB,EAI5BU,aAJ4B,CADX;AAAA,GAAnB,CADkB,CAAnB;AAWA,SAAOC,MAAP;AACA,CAhBD;AAkBA;;;;;;;;;;;;AAUAK,MAAM,CAACC,OAAP,GAAiBV,MAAjB","sourcesContent":["/**\n * External dependencies\n */\nconst babel = require( '@babel/core' );\nconst { flatten } = require( 'lodash' );\n\n/**\n * Internal dependencies\n */\nconst getIntermediateRepresentation = require( './get-intermediate-representation' );\n\nconst getAST = ( source ) => {\n\treturn babel.parse( source || '' ).program;\n};\n\nconst getExportTokens = ( ast ) =>\n\tast.body.filter( ( node ) =>\n\t\t[\n\t\t\t'ExportNamedDeclaration',\n\t\t\t'ExportDefaultDeclaration',\n\t\t\t'ExportAllDeclaration',\n\t\t].some( ( declaration ) => declaration === node.type )\n\t);\n\nconst engine = ( path, code, getIRFromPath = () => {} ) => {\n\tconst result = {};\n\tresult.ast = getAST( code );\n\tresult.tokens = getExportTokens( result.ast );\n\tresult.ir = flatten(\n\t\tresult.tokens.map( ( token ) =>\n\t\t\tgetIntermediateRepresentation(\n\t\t\t\tpath,\n\t\t\t\ttoken,\n\t\t\t\tresult.ast,\n\t\t\t\tgetIRFromPath\n\t\t\t)\n\t\t)\n\t);\n\n\treturn result;\n};\n\n/**\n * Function that takes code and returns an intermediate representation.\n *\n * @param {string} code The code to parse.\n * @param {Function} [getIRFromPath=noop] Callback to retrieve the\n * Intermediate Representation from a path relative to the file\n * being parsed.\n *\n * @return {Object} Intermediate Representation in JSON.\n */\nmodule.exports = engine;\n"]}