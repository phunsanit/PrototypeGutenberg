{"version":3,"sources":["@wordpress/editor/src/components/reusable-blocks-buttons/reusable-block-convert-button.js"],"names":["ReusableBlockConvertButton","isVisible","isReusable","onConvertToStatic","onConvertToReusable","onClose","select","clientIds","getBlocksByClientId","canInsertBlockType","getReusableBlock","__experimentalGetReusableBlock","canUser","blocks","length","attributes","ref","block","isValid","name","dispatch","convertBlockToReusable","__experimentalConvertBlockToReusable","convertBlockToStatic","__experimentalConvertBlockToStatic"],"mappings":";;;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAbA;;;;AAKA;;;AAUO,SAASA,0BAAT,OAKH;AAAA,MAJHC,SAIG,QAJHA,SAIG;AAAA,MAHHC,UAGG,QAHHA,UAGG;AAAA,MAFHC,iBAEG,QAFHA,iBAEG;AAAA,MADHC,mBACG,QADHA,mBACG;;AACH,MAAK,CAAEH,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,SACC,4BAAC,sCAAD,QACG;AAAA,QAAII,OAAJ,SAAIA,OAAJ;AAAA,WACD,qDACG,CAAEH,UAAF,IACD,4BAAC,oBAAD;AACC,MAAA,OAAO,EAAG,mBAAM;AACfE,QAAAA,mBAAmB;AACnBC,QAAAA,OAAO;AACP;AAJF,OAMG,cAAI,wBAAJ,CANH,CAFF,EAWGH,UAAU,IACX,4BAAC,oBAAD;AACC,MAAA,OAAO,EAAG,mBAAM;AACfC,QAAAA,iBAAiB;AACjBE,QAAAA,OAAO;AACP;AAJF,OAMG,cAAI,0BAAJ,CANH,CAZF,CADC;AAAA,GADH,CADD;AA4BA;;eAEc,sBAAS,CACvB,sBAAY,UAAEC,MAAF,SAA6B;AAAA,MAAjBC,SAAiB,SAAjBA,SAAiB;;AAAA,gBACYD,MAAM,CACzD,mBADyD,CADlB;AAAA,MAChCE,mBADgC,WAChCA,mBADgC;AAAA,MACXC,kBADW,WACXA,kBADW;;AAAA,iBAIqBH,MAAM,CAClE,aADkE,CAJ3B;AAAA,MAIAI,gBAJA,YAIhCC,8BAJgC;;AAAA,iBAOpBL,MAAM,CAAE,MAAF,CAPc;AAAA,MAOhCM,OAPgC,YAOhCA,OAPgC;;AASxC,MAAMC,MAAM,GAAGL,mBAAmB,CAAED,SAAF,CAAlC;AAEA,MAAML,UAAU,GACfW,MAAM,CAACC,MAAP,KAAkB,CAAlB,IACAD,MAAM,CAAE,CAAF,CADN,IAEA,6BAAiBA,MAAM,CAAE,CAAF,CAAvB,CAFA,IAGA,CAAC,CAAEH,gBAAgB,CAAEG,MAAM,CAAE,CAAF,CAAN,CAAYE,UAAZ,CAAuBC,GAAzB,CAJpB,CAXwC,CAiBxC;;AACA,MAAMf,SAAS,GACdC,UAAU,IACV;AACEO,EAAAA,kBAAkB,CAAE,YAAF,CAAlB,IACD,mBACCI,MADD,EAEC,UAAEI,KAAF;AAAA,WACC;AACA,OAAC,CAAEA,KAAH,IACA;AACAA,MAAAA,KAAK,CAACC,OAFN,IAGA;AACA,mCAAiBD,KAAK,CAACE,IAAvB,EAA6B,UAA7B,EAAyC,IAAzC;AAND;AAAA,GAFD,CADC,IAWD;AACA,GAAC,CAAEP,OAAO,CAAE,QAAF,EAAY,QAAZ,CAfZ;AAiBA,SAAO;AACNV,IAAAA,UAAU,EAAVA,UADM;AAEND,IAAAA,SAAS,EAATA;AAFM,GAAP;AAIA,CAvCD,CADuB,EAyCvB,wBAAc,UAAEmB,QAAF,SAA+B;AAAA,MAAjBb,SAAiB,SAAjBA,SAAiB;;AAAA,kBAIxCa,QAAQ,CAAE,aAAF,CAJgC;AAAA,MAELC,sBAFK,aAE3CC,oCAF2C;AAAA,MAGPC,oBAHO,aAG3CC,kCAH2C;;AAM5C,SAAO;AACNrB,IAAAA,iBADM,+BACc;AACnBoB,MAAAA,oBAAoB,CAAEhB,SAAS,CAAE,CAAF,CAAX,CAApB;AACA,KAHK;AAINH,IAAAA,mBAJM,iCAIgB;AACrBiB,MAAAA,sBAAsB,CAAEd,SAAF,CAAtB;AACA;AANK,GAAP;AAQA,CAdD,CAzCuB,CAAT,EAwDVP,0BAxDU,C","sourcesContent":["/**\n * External dependencies\n */\nimport { every } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\n\nexport function ReusableBlockConvertButton( {\n\tisVisible,\n\tisReusable,\n\tonConvertToStatic,\n\tonConvertToReusable,\n} ) {\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<>\n\t\t\t\t\t{ ! isReusable && (\n\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\tonConvertToReusable();\n\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ __( 'Add to Reusable blocks' ) }\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t) }\n\t\t\t\t\t{ isReusable && (\n\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\tonConvertToStatic();\n\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ __( 'Convert to Regular Block' ) }\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n\nexport default compose( [\n\twithSelect( ( select, { clientIds } ) => {\n\t\tconst { getBlocksByClientId, canInsertBlockType } = select(\n\t\t\t'core/block-editor'\n\t\t);\n\t\tconst { __experimentalGetReusableBlock: getReusableBlock } = select(\n\t\t\t'core/editor'\n\t\t);\n\t\tconst { canUser } = select( 'core' );\n\n\t\tconst blocks = getBlocksByClientId( clientIds );\n\n\t\tconst isReusable =\n\t\t\tblocks.length === 1 &&\n\t\t\tblocks[ 0 ] &&\n\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t!! getReusableBlock( blocks[ 0 ].attributes.ref );\n\n\t\t// Show 'Convert to Regular Block' when selected block is a reusable block\n\t\tconst isVisible =\n\t\t\tisReusable ||\n\t\t\t// Hide 'Add to Reusable blocks' when reusable blocks are disabled\n\t\t\t( canInsertBlockType( 'core/block' ) &&\n\t\t\t\tevery(\n\t\t\t\t\tblocks,\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide 'Add to Reusable blocks' on invalid blocks\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide 'Add to Reusable blocks' when block doesn't support being made reusable\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide 'Add to Reusable blocks' when current doesn't have permission to do that\n\t\t\t\t!! canUser( 'create', 'blocks' ) );\n\n\t\treturn {\n\t\t\tisReusable,\n\t\t\tisVisible,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { clientIds } ) => {\n\t\tconst {\n\t\t\t__experimentalConvertBlockToReusable: convertBlockToReusable,\n\t\t\t__experimentalConvertBlockToStatic: convertBlockToStatic,\n\t\t} = dispatch( 'core/editor' );\n\n\t\treturn {\n\t\t\tonConvertToStatic() {\n\t\t\t\tconvertBlockToStatic( clientIds[ 0 ] );\n\t\t\t},\n\t\t\tonConvertToReusable() {\n\t\t\t\tconvertBlockToReusable( clientIds );\n\t\t\t},\n\t\t};\n\t} ),\n] )( ReusableBlockConvertButton );\n"]}