{"version":3,"sources":["@wordpress/editor/src/components/post-saved-state/index.js"],"names":["PostSavedState","arguments","state","forceSavedMessage","prevProps","isSaving","props","setState","setTimeout","post","isNew","isScheduled","isPublished","isDirty","isSaveable","onSave","isAutosaving","isPending","isLargeViewport","classes","animateClassName","className","cloud","check","hasPublishAction","label","displayShortcut","primary","cloudUpload","Component","select","forceIsDirty","forceIsSaving","isEditedPostNew","isCurrentPostPublished","isCurrentPostScheduled","isEditedPostDirty","isSavingPost","isEditedPostSaveable","getCurrentPost","isAutosavingPost","getEditedPostAttribute","dispatch","savePost","withSafeTimeout"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Animate, Button } from '@wordpress/components';\nimport { Component } from '@wordpress/element';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { displayShortcut } from '@wordpress/keycodes';\nimport { withSafeTimeout, compose } from '@wordpress/compose';\nimport { withViewportMatch } from '@wordpress/viewport';\nimport { Icon, check, cloud, cloudUpload } from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport PostSwitchToDraftButton from '../post-switch-to-draft-button';\n\n/**\n * Component showing whether the post is saved or not and displaying save links.\n *\n * @param   {Object}    Props Component Props.\n */\nexport class PostSavedState extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.state = {\n\t\t\tforceSavedMessage: false,\n\t\t};\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( prevProps.isSaving && ! this.props.isSaving ) {\n\t\t\tthis.setState( { forceSavedMessage: true } );\n\t\t\tthis.props.setTimeout( () => {\n\t\t\t\tthis.setState( { forceSavedMessage: false } );\n\t\t\t}, 1000 );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tpost,\n\t\t\tisNew,\n\t\t\tisScheduled,\n\t\t\tisPublished,\n\t\t\tisDirty,\n\t\t\tisSaving,\n\t\t\tisSaveable,\n\t\t\tonSave,\n\t\t\tisAutosaving,\n\t\t\tisPending,\n\t\t\tisLargeViewport,\n\t\t} = this.props;\n\t\tconst { forceSavedMessage } = this.state;\n\t\tif ( isSaving ) {\n\t\t\t// TODO: Classes generation should be common across all return\n\t\t\t// paths of this function, including proper naming convention for\n\t\t\t// the \"Save Draft\" button.\n\t\t\tconst classes = classnames(\n\t\t\t\t'editor-post-saved-state',\n\t\t\t\t'is-saving',\n\t\t\t\t{\n\t\t\t\t\t'is-autosaving': isAutosaving,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn (\n\t\t\t\t<Animate type=\"loading\">\n\t\t\t\t\t{ ( { className: animateClassName } ) => (\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\t\t\tclasses,\n\t\t\t\t\t\t\t\tanimateClassName\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon icon={ cloud } />\n\t\t\t\t\t\t\t{ isAutosaving\n\t\t\t\t\t\t\t\t? __( 'Autosaving' )\n\t\t\t\t\t\t\t\t: __( 'Saving' ) }\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) }\n\t\t\t\t</Animate>\n\t\t\t);\n\t\t}\n\n\t\tif ( isPublished || isScheduled ) {\n\t\t\treturn <PostSwitchToDraftButton />;\n\t\t}\n\n\t\tif ( ! isSaveable ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( forceSavedMessage || ( ! isNew && ! isDirty ) ) {\n\t\t\treturn (\n\t\t\t\t<span className=\"editor-post-saved-state is-saved\">\n\t\t\t\t\t<Icon icon={ check } />\n\t\t\t\t\t{ __( 'Saved' ) }\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\n\t\t// Once the post has been submitted for review this button\n\t\t// is not needed for the contributor role.\n\t\tconst hasPublishAction = get(\n\t\t\tpost,\n\t\t\t[ '_links', 'wp:action-publish' ],\n\t\t\tfalse\n\t\t);\n\t\tif ( ! hasPublishAction && isPending ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst label = isPending ? __( 'Save as Pending' ) : __( 'Save Draft' );\n\t\tif ( ! isLargeViewport ) {\n\t\t\treturn (\n\t\t\t\t<Button\n\t\t\t\t\tclassName=\"editor-post-save-draft\"\n\t\t\t\t\tlabel={ label }\n\t\t\t\t\tonClick={ () => onSave() }\n\t\t\t\t\tshortcut={ displayShortcut.primary( 's' ) }\n\t\t\t\t\ticon={ cloudUpload }\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tclassName=\"editor-post-save-draft\"\n\t\t\t\tonClick={ () => onSave() }\n\t\t\t\tshortcut={ displayShortcut.primary( 's' ) }\n\t\t\t\tisTertiary\n\t\t\t>\n\t\t\t\t{ label }\n\t\t\t</Button>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select, { forceIsDirty, forceIsSaving } ) => {\n\t\tconst {\n\t\t\tisEditedPostNew,\n\t\t\tisCurrentPostPublished,\n\t\t\tisCurrentPostScheduled,\n\t\t\tisEditedPostDirty,\n\t\t\tisSavingPost,\n\t\t\tisEditedPostSaveable,\n\t\t\tgetCurrentPost,\n\t\t\tisAutosavingPost,\n\t\t\tgetEditedPostAttribute,\n\t\t} = select( 'core/editor' );\n\t\treturn {\n\t\t\tpost: getCurrentPost(),\n\t\t\tisNew: isEditedPostNew(),\n\t\t\tisPublished: isCurrentPostPublished(),\n\t\t\tisScheduled: isCurrentPostScheduled(),\n\t\t\tisDirty: forceIsDirty || isEditedPostDirty(),\n\t\t\tisSaving: forceIsSaving || isSavingPost(),\n\t\t\tisSaveable: isEditedPostSaveable(),\n\t\t\tisAutosaving: isAutosavingPost(),\n\t\t\tisPending: 'pending' === getEditedPostAttribute( 'status' ),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => ( {\n\t\tonSave: dispatch( 'core/editor' ).savePost,\n\t} ) ),\n\twithSafeTimeout,\n\twithViewportMatch( { isLargeViewport: 'small' } ),\n] )( PostSavedState );\n"]}