{"version":3,"sources":["@wordpress/block-directory/src/store/selectors.js"],"names":["isRequestingDownloadableBlocks","state","downloadableBlocks","getDownloadableBlocks","filterValue","results","hasInstallBlocksPermission","hasPermission","getInstalledBlockTypes","blockManagement","installedBlockTypes","isInstalling","getErrorNotices","errorNotices","getErrorNoticeForBlock","blockId"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;AAOO,SAASA,8BAAT,CAAyCC,KAAzC,EAAiD;AACvD,SAAOA,KAAK,CAACC,kBAAN,CAAyBF,8BAAhC;AACA;AAED;;;;;;;;;;AAQO,SAASG,qBAAT,CAAgCF,KAAhC,EAAuCG,WAAvC,EAAqD;AAC3D,MAAK,CAAEH,KAAK,CAACC,kBAAN,CAAyBG,OAAzB,CAAkCD,WAAlC,CAAP,EAAyD;AACxD,WAAO,EAAP;AACA;;AACD,SAAOH,KAAK,CAACC,kBAAN,CAAyBG,OAAzB,CAAkCD,WAAlC,CAAP;AACA;AAED;;;;;;;;;AAOO,SAASE,0BAAT,CAAqCL,KAArC,EAA6C;AACnD,SAAOA,KAAK,CAACM,aAAb;AACA;AAED;;;;;;;;;AAOO,SAASC,sBAAT,CAAiCP,KAAjC,EAAyC;AAC/C,SAAOA,KAAK,CAACQ,eAAN,CAAsBC,mBAA7B;AACA;AAED;;;;;;;;;AAOO,SAASC,YAAT,CAAuBV,KAAvB,EAA+B;AACrC,SAAOA,KAAK,CAACQ,eAAN,CAAsBE,YAA7B;AACA;AAED;;;;;;;;;AAOO,SAASC,eAAT,CAA0BX,KAA1B,EAAkC;AACxC,SAAOA,KAAK,CAACY,YAAb;AACA;AAED;;;;;;;;;;AAQO,SAASC,sBAAT,CAAiCb,KAAjC,EAAwCc,OAAxC,EAAkD;AACxD,SAAOd,KAAK,CAACY,YAAN,CAAoBE,OAApB,KAAiC,KAAxC;AACA","sourcesContent":["/**\n * Returns true if application is requesting for downloadable blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Downloadable blocks\n */\nexport function isRequestingDownloadableBlocks( state ) {\n\treturn state.downloadableBlocks.isRequestingDownloadableBlocks;\n}\n\n/**\n * Returns the available uninstalled blocks\n *\n * @param {Object} state       Global application state.\n * @param {string} filterValue Search string.\n *\n * @return {Array} Downloadable blocks\n */\nexport function getDownloadableBlocks( state, filterValue ) {\n\tif ( ! state.downloadableBlocks.results[ filterValue ] ) {\n\t\treturn [];\n\t}\n\treturn state.downloadableBlocks.results[ filterValue ];\n}\n\n/**\n * Returns true if user has permission to install blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} User has permission to install blocks.\n */\nexport function hasInstallBlocksPermission( state ) {\n\treturn state.hasPermission;\n}\n\n/**\n * Returns the block types that have been installed on the server.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Block type items.\n */\nexport function getInstalledBlockTypes( state ) {\n\treturn state.blockManagement.installedBlockTypes;\n}\n\n/**\n * Returns true if application is calling install endpoint.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether its currently installing\n */\nexport function isInstalling( state ) {\n\treturn state.blockManagement.isInstalling;\n}\n\n/**\n * Returns the error notices\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object with error notices.\n */\nexport function getErrorNotices( state ) {\n\treturn state.errorNotices;\n}\n\n/**\n * Returns the error notice for a given block.\n *\n * @param {Object} state   Global application state.\n * @param {string} blockId The ID of the block plugin. eg: my-block\n *\n * @return {string|boolean} The error text, or false if no error.\n */\nexport function getErrorNoticeForBlock( state, blockId ) {\n\treturn state.errorNotices[ blockId ] || false;\n}\n"]}