{"version":3,"sources":["@wordpress/block-directory/src/store/actions.js"],"names":["installBlockType","__","apiFetch","select","loadAssets","fetchDownloadableBlocks","filterValue","type","receiveDownloadableBlocks","downloadableBlocks","setInstallBlocksPermission","hasPermission","id","name","assets","success","clearErrorNotice","Array","isArray","length","Error","setIsInstalling","path","data","slug","method","response","addInstalledBlockType","registeredBlocks","setErrorNotice","message","item","isInstalling","blockId","notice"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { apiFetch, select } from '@wordpress/data-controls';\n\n/**\n * Internal dependencies\n */\nimport { loadAssets } from './controls';\n\n/**\n * Returns an action object used in signalling that the downloadable blocks\n * have been requested and is loading.\n *\n * @param {string} filterValue Search string.\n *\n * @return {Object} Action object.\n */\nexport function fetchDownloadableBlocks( filterValue ) {\n\treturn { type: 'FETCH_DOWNLOADABLE_BLOCKS', filterValue };\n}\n\n/**\n * Returns an action object used in signalling that the downloadable blocks\n * have been updated.\n *\n * @param {Array}  downloadableBlocks Downloadable blocks.\n * @param {string} filterValue        Search string.\n *\n * @return {Object} Action object.\n */\nexport function receiveDownloadableBlocks( downloadableBlocks, filterValue ) {\n\treturn {\n\t\ttype: 'RECEIVE_DOWNLOADABLE_BLOCKS',\n\t\tdownloadableBlocks,\n\t\tfilterValue,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user does not have\n * permission to install blocks.\n *\n * @param {boolean} hasPermission User has permission to install blocks.\n *\n * @return {Object} Action object.\n */\nexport function setInstallBlocksPermission( hasPermission ) {\n\treturn { type: 'SET_INSTALL_BLOCKS_PERMISSION', hasPermission };\n}\n\n/**\n * Action triggered to install a block plugin.\n *\n * @param {Object} item The block item returned by search.\n *\n * @return {boolean} Whether the block was successfully installed & loaded.\n */\nexport function* installBlockType( { id, name, assets } ) {\n\tlet success = false;\n\tyield clearErrorNotice( id );\n\ttry {\n\t\tif ( ! Array.isArray( assets ) || ! assets.length ) {\n\t\t\tthrow new Error( __( 'Block has no assets.' ) );\n\t\t}\n\t\tyield setIsInstalling( true );\n\t\tconst response = yield apiFetch( {\n\t\t\tpath: '__experimental/block-directory/install',\n\t\t\tdata: {\n\t\t\t\tslug: id,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t} );\n\t\tif ( response.success !== true ) {\n\t\t\tthrow new Error( __( 'Unable to install this block.' ) );\n\t\t}\n\t\tyield addInstalledBlockType( { id, name } );\n\n\t\tyield loadAssets( assets );\n\t\tconst registeredBlocks = yield select( 'core/blocks', 'getBlockTypes' );\n\t\tif ( ! registeredBlocks.length ) {\n\t\t\tthrow new Error( __( 'Unable to get block types.' ) );\n\t\t}\n\t\tsuccess = true;\n\t} catch ( error ) {\n\t\tyield setErrorNotice( id, error.message || __( 'An error occurred.' ) );\n\t}\n\tyield setIsInstalling( false );\n\treturn success;\n}\n\n/**\n * Returns an action object used to add a newly installed block type.\n *\n * @param {Object} item The block item with the block id and name.\n *\n * @return {Object} Action object.\n */\nexport function addInstalledBlockType( item ) {\n\treturn {\n\t\ttype: 'ADD_INSTALLED_BLOCK_TYPE',\n\t\titem,\n\t};\n}\n\n/**\n * Returns an action object used to indicate install in progress\n *\n * @param {boolean} isInstalling\n *\n * @return {Object} Action object.\n */\nexport function setIsInstalling( isInstalling ) {\n\treturn {\n\t\ttype: 'SET_INSTALLING_BLOCK',\n\t\tisInstalling,\n\t};\n}\n\n/**\n * Sets an error notice string to be displayed to the user\n *\n * @param {string} blockId The ID of the block plugin. eg: my-block\n * @param {string} notice  The message shown in the notice.\n *\n * @return {Object} Action object.\n */\nexport function setErrorNotice( blockId, notice ) {\n\treturn {\n\t\ttype: 'SET_ERROR_NOTICE',\n\t\tblockId,\n\t\tnotice,\n\t};\n}\n\n/**\n * Sets the error notice to empty for specific block\n *\n * @param {string} blockId The ID of the block plugin. eg: my-block\n *\n * @return {Object} Action object.\n */\nexport function clearErrorNotice( blockId ) {\n\treturn {\n\t\ttype: 'SET_ERROR_NOTICE',\n\t\tblockId,\n\t\tnotice: false,\n\t};\n}\n"]}