{"version":3,"sources":["@wordpress/block-library/src/columns/edit.native.js"],"names":["View","dropRight","times","__","PanelBody","RangeControl","InspectorControls","InnerBlocks","BlockControls","BlockVerticalAlignmentToolbar","withDispatch","useSelect","useEffect","useState","useResizeObserver","createBlock","styles","ALLOWED_BLOCKS","DEFAULT_COLUMNS","MIN_COLUMNS_NUMBER","BREAKPOINTS","mobile","large","ColumnsEditContainer","attributes","updateAlignment","updateColumns","columnCount","isSelected","onAddNextColumn","onDeleteBlock","resizeListener","sizes","columnsInRow","setColumnsInRow","containerMaxWidth","columnsContainer","maxWidth","verticalAlignment","width","newColumnCount","getColumnsInRow","getColumnWidth","containerWidth","minWidth","Math","min","columnBaseWidth","columnWidth","margins","columnMargin","marginLeft","columnsNumber","max","renderAppender","value","innerBlocksSelected","undefined","ColumnsEditContainerWrapper","dispatch","ownProps","registry","clientId","setAttributes","updateBlockAttributes","select","getBlockOrder","innerBlockClientIds","forEach","innerBlockClientId","updateBlockSettings","settings","updateBlockListSettings","previousColumns","newColumns","replaceInnerBlocks","getBlocks","getBlockAttributes","innerBlocks","isAddingColumn","selectBlock","insertedBlock","push","removeBlock","ColumnsEdit","props","getBlockCount"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { View } from 'react-native';\nimport { dropRight, times } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody, RangeControl } from '@wordpress/components';\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n} from '@wordpress/block-editor';\nimport { withDispatch, useSelect } from '@wordpress/data';\nimport { useEffect, useState } from '@wordpress/element';\nimport { useResizeObserver } from '@wordpress/compose';\nimport { createBlock } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport styles from './editor.scss';\n\n/**\n * Allowed blocks constant is passed to InnerBlocks precisely as specified here.\n * The contents of the array should never change.\n * The array should contain the name of each block that is allowed.\n * In columns block, the only block we allow is 'core/column'.\n *\n * @constant\n * @type {string[]}\n */\nconst ALLOWED_BLOCKS = [ 'core/column' ];\n\n/**\n * Number of columns to assume for template in case the user opts to skip\n * template option selection.\n *\n * @type {number}\n */\nconst DEFAULT_COLUMNS = 2;\nconst MIN_COLUMNS_NUMBER = 1;\n\nconst BREAKPOINTS = {\n\tmobile: 480,\n\tlarge: 768,\n};\n\nfunction ColumnsEditContainer( {\n\tattributes,\n\tupdateAlignment,\n\tupdateColumns,\n\tcolumnCount,\n\tisSelected,\n\tonAddNextColumn,\n\tonDeleteBlock,\n} ) {\n\tconst [ resizeListener, sizes ] = useResizeObserver();\n\tconst [ columnsInRow, setColumnsInRow ] = useState( MIN_COLUMNS_NUMBER );\n\n\tconst containerMaxWidth = styles.columnsContainer.maxWidth;\n\n\tconst { verticalAlignment } = attributes;\n\tconst { width } = sizes || {};\n\n\tuseEffect( () => {\n\t\tconst newColumnCount = ! columnCount ? DEFAULT_COLUMNS : columnCount;\n\t\tupdateColumns( columnCount, newColumnCount );\n\t\tsetColumnsInRow( getColumnsInRow( width, newColumnCount ) );\n\t}, [ columnCount ] );\n\n\tuseEffect( () => {\n\t\tsetColumnsInRow( getColumnsInRow( width, columnCount ) );\n\t}, [ width ] );\n\n\tconst getColumnWidth = ( containerWidth = containerMaxWidth ) => {\n\t\tconst minWidth = Math.min( containerWidth, containerMaxWidth );\n\t\tconst columnBaseWidth = minWidth / columnsInRow;\n\n\t\tlet columnWidth = columnBaseWidth;\n\t\tif ( columnsInRow > 1 ) {\n\t\t\tconst margins = columnsInRow * 2 * styles.columnMargin.marginLeft;\n\t\t\tcolumnWidth = ( minWidth - margins ) / columnsInRow;\n\t\t}\n\n\t\treturn columnWidth;\n\t};\n\n\tconst getColumnsInRow = ( containerWidth, columnsNumber ) => {\n\t\tif ( containerWidth < BREAKPOINTS.mobile ) {\n\t\t\t// show only 1 Column in row for mobile breakpoint container width\n\t\t\treturn 1;\n\t\t} else if ( containerWidth < BREAKPOINTS.large ) {\n\t\t\t// show 2 Column in row for large breakpoint container width\n\t\t\treturn Math.min( Math.max( 1, columnCount ), 2 );\n\t\t}\n\t\t// show all Column in one row\n\t\treturn Math.max( 1, columnsNumber );\n\t};\n\n\tconst renderAppender = () => {\n\t\tif ( isSelected ) {\n\t\t\treturn (\n\t\t\t\t<InnerBlocks.ButtonBlockAppender\n\t\t\t\t\tonAddBlock={ onAddNextColumn }\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Columns Settings' ) }>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Number of columns' ) }\n\t\t\t\t\t\ticon=\"columns\"\n\t\t\t\t\t\tvalue={ columnCount }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tupdateColumns( columnCount, value )\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmin={ MIN_COLUMNS_NUMBER }\n\t\t\t\t\t\tmax={ columnCount + 1 }\n\t\t\t\t\t\ttype=\"stepper\"\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<View style={ isSelected && styles.innerBlocksSelected }>\n\t\t\t\t{ resizeListener }\n\t\t\t\t<InnerBlocks\n\t\t\t\t\trenderAppender={ renderAppender }\n\t\t\t\t\t__experimentalMoverDirection={\n\t\t\t\t\t\tcolumnsInRow > 1 ? 'horizontal' : undefined\n\t\t\t\t\t}\n\t\t\t\t\thorizontal={ true }\n\t\t\t\t\tallowedBlocks={ ALLOWED_BLOCKS }\n\t\t\t\t\tcontentResizeMode=\"stretch\"\n\t\t\t\t\tonAddBlock={ onAddNextColumn }\n\t\t\t\t\tonDeleteBlock={\n\t\t\t\t\t\tcolumnCount === 1 ? onDeleteBlock : undefined\n\t\t\t\t\t}\n\t\t\t\t\tcontentStyle={ { width: getColumnWidth( width ) } }\n\t\t\t\t/>\n\t\t\t</View>\n\t\t</>\n\t);\n}\n\nconst ColumnsEditContainerWrapper = withDispatch(\n\t( dispatch, ownProps, registry ) => ( {\n\t\t/**\n\t\t * Update all child Column blocks with a new vertical alignment setting\n\t\t * based on whatever alignment is passed in. This allows change to parent\n\t\t * to overide anything set on a individual column basis.\n\t\t *\n\t\t * @param {string} verticalAlignment the vertical alignment setting\n\t\t */\n\t\tupdateAlignment( verticalAlignment ) {\n\t\t\tconst { clientId, setAttributes } = ownProps;\n\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlockOrder } = registry.select( 'core/block-editor' );\n\n\t\t\t// Update own alignment.\n\t\t\tsetAttributes( { verticalAlignment } );\n\n\t\t\t// Update all child Column Blocks to match\n\t\t\tconst innerBlockClientIds = getBlockOrder( clientId );\n\t\t\tinnerBlockClientIds.forEach( ( innerBlockClientId ) => {\n\t\t\t\tupdateBlockAttributes( innerBlockClientId, {\n\t\t\t\t\tverticalAlignment,\n\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\t\tupdateBlockSettings( settings ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { updateBlockListSettings } = dispatch( 'core/block-editor' );\n\t\t\tupdateBlockListSettings( clientId, settings );\n\t\t},\n\t\t/**\n\t\t * Updates the column columnCount, including necessary revisions to child Column\n\t\t * blocks to grant required or redistribute available space.\n\t\t *\n\t\t * @param {number} previousColumns Previous column columnCount.\n\t\t * @param {number} newColumns      New column columnCount.\n\t\t */\n\t\tupdateColumns( previousColumns, newColumns ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlocks, getBlockAttributes } = registry.select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\tlet innerBlocks = getBlocks( clientId );\n\n\t\t\t// Redistribute available width for existing inner blocks.\n\t\t\tconst isAddingColumn = newColumns > previousColumns;\n\n\t\t\tif ( isAddingColumn ) {\n\t\t\t\t// Get verticalAlignment from Columns block to set the same to new Column\n\t\t\t\tconst { verticalAlignment } = getBlockAttributes( clientId );\n\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column', {\n\t\t\t\t\t\t\tverticalAlignment,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\t// The removed column will be the last of the inner blocks.\n\t\t\t\tinnerBlocks = dropRight(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\tpreviousColumns - newColumns\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treplaceInnerBlocks( clientId, innerBlocks, false );\n\t\t},\n\t\tonAddNextColumn: () => {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks, selectBlock } = dispatch(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\t\t\tconst { getBlocks, getBlockAttributes } = registry.select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\t// Get verticalAlignment from Columns block to set the same to new Column\n\t\t\tconst { verticalAlignment } = getBlockAttributes( clientId );\n\n\t\t\tconst innerBlocks = getBlocks( clientId );\n\n\t\t\tconst insertedBlock = createBlock( 'core/column', {\n\t\t\t\tverticalAlignment,\n\t\t\t} );\n\n\t\t\tinnerBlocks.push( insertedBlock );\n\n\t\t\treplaceInnerBlocks( clientId, innerBlocks, true );\n\t\t\tselectBlock( insertedBlock.clientId );\n\t\t},\n\t\tonDeleteBlock: () => {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { removeBlock } = dispatch( 'core/block-editor' );\n\t\t\tremoveBlock( clientId );\n\t\t},\n\t} )\n)( ColumnsEditContainer );\n\nconst ColumnsEdit = ( props ) => {\n\tconst { clientId } = props;\n\tconst { columnCount } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockCount } = select( 'core/block-editor' );\n\n\t\t\treturn {\n\t\t\t\tcolumnCount: getBlockCount( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\treturn (\n\t\t<ColumnsEditContainerWrapper columnCount={ columnCount } { ...props } />\n\t);\n};\n\nexport default ColumnsEdit;\n"]}