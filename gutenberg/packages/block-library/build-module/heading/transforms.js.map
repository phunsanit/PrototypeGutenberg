{"version":3,"sources":["@wordpress/block-library/src/heading/transforms.js"],"names":["createBlock","getBlockAttributes","getLevelFromHeadingNodeName","transforms","from","type","blocks","transform","content","name","selector","schema","phrasingContentSchema","isPaste","children","attributes","h1","h2","h3","h4","h5","h6","node","outerHTML","style","textAlign","level","nodeName","align","map","prefix","Array","join","to"],"mappings":";;AAAA;;;AAGA,SAASA,WAAT,EAAsBC,kBAAtB,QAAgD,mBAAhD;AAEA;;;;AAGA,SAASC,2BAAT,QAA4C,UAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMC,UAAU,GAAG;AAClBC,EAAAA,IAAI,GACH;AACCC,IAAAA,IAAI,EAAE,OADP;AAECC,IAAAA,MAAM,EAAE,CAAE,gBAAF,CAFT;AAGCC,IAAAA,SAAS,EAAE,yBAAmB;AAAA,UAAfC,OAAe,QAAfA,OAAe;AAC7B,aAAOR,WAAW,CAAES,IAAF,EAAQ;AACzBD,QAAAA,OAAO,EAAPA;AADyB,OAAR,CAAlB;AAGA;AAPF,GADG,EAUH;AACCH,IAAAA,IAAI,EAAE,KADP;AAECK,IAAAA,QAAQ,EAAE,mBAFX;AAGCC,IAAAA,MAAM,EAAE,uBAA0C;AAAA,UAAtCC,qBAAsC,SAAtCA,qBAAsC;AAAA,UAAfC,OAAe,SAAfA,OAAe;AACjD,UAAMF,MAAM,GAAG;AACdG,QAAAA,QAAQ,EAAEF,qBADI;AAEdG,QAAAA,UAAU,EAAEF,OAAO,GAAG,EAAH,GAAQ,CAAE,OAAF;AAFb,OAAf;AAIA,aAAO;AACNG,QAAAA,EAAE,EAAEL,MADE;AAENM,QAAAA,EAAE,EAAEN,MAFE;AAGNO,QAAAA,EAAE,EAAEP,MAHE;AAINQ,QAAAA,EAAE,EAAER,MAJE;AAKNS,QAAAA,EAAE,EAAET,MALE;AAMNU,QAAAA,EAAE,EAAEV;AANE,OAAP;AAQA,KAhBF;AAiBCJ,IAAAA,SAjBD,qBAiBYe,IAjBZ,EAiBmB;AACjB,UAAMP,UAAU,GAAGd,kBAAkB,CAAEQ,IAAF,EAAQa,IAAI,CAACC,SAAb,CAArC;;AADiB,kBAEKD,IAAI,CAACE,KAAL,IAAc,EAFnB;AAAA,UAETC,SAFS,SAETA,SAFS;;AAIjBV,MAAAA,UAAU,CAACW,KAAX,GAAmBxB,2BAA2B,CAAEoB,IAAI,CAACK,QAAP,CAA9C;;AAEA,UACCF,SAAS,KAAK,MAAd,IACAA,SAAS,KAAK,QADd,IAEAA,SAAS,KAAK,OAHf,EAIE;AACDV,QAAAA,UAAU,CAACa,KAAX,GAAmBH,SAAnB;AACA;;AAED,aAAOzB,WAAW,CAAES,IAAF,EAAQM,UAAR,CAAlB;AACA;AAhCF,GAVG,4BA4CA,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAkBc,GAAlB,CAAuB,UAAEH,KAAF;AAAA,WAAe;AACxCrB,MAAAA,IAAI,EAAE,QADkC;AAExCyB,MAAAA,MAAM,EAAEC,KAAK,CAAEL,KAAK,GAAG,CAAV,CAAL,CAAmBM,IAAnB,CAAyB,GAAzB,CAFgC;AAGxCzB,MAAAA,SAHwC,qBAG7BC,OAH6B,EAGnB;AACpB,eAAOR,WAAW,CAAES,IAAF,EAAQ;AACzBiB,UAAAA,KAAK,EAALA,KADyB;AAEzBlB,UAAAA,OAAO,EAAPA;AAFyB,SAAR,CAAlB;AAIA;AARuC,KAAf;AAAA,GAAvB,CA5CA,EADc;AAwDlByB,EAAAA,EAAE,EAAE,CACH;AACC5B,IAAAA,IAAI,EAAE,OADP;AAECC,IAAAA,MAAM,EAAE,CAAE,gBAAF,CAFT;AAGCC,IAAAA,SAAS,EAAE,0BAAmB;AAAA,UAAfC,OAAe,SAAfA,OAAe;AAC7B,aAAOR,WAAW,CAAE,gBAAF,EAAoB;AACrCQ,QAAAA,OAAO,EAAPA;AADqC,OAApB,CAAlB;AAGA;AAPF,GADG;AAxDc,CAAnB;AAqEA,eAAeL,UAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock, getBlockAttributes } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { getLevelFromHeadingNodeName } from './shared';\nimport { name } from './block.json';\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { content } ) => {\n\t\t\t\treturn createBlock( name, {\n\t\t\t\t\tcontent,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'raw',\n\t\t\tselector: 'h1,h2,h3,h4,h5,h6',\n\t\t\tschema: ( { phrasingContentSchema, isPaste } ) => {\n\t\t\t\tconst schema = {\n\t\t\t\t\tchildren: phrasingContentSchema,\n\t\t\t\t\tattributes: isPaste ? [] : [ 'style' ],\n\t\t\t\t};\n\t\t\t\treturn {\n\t\t\t\t\th1: schema,\n\t\t\t\t\th2: schema,\n\t\t\t\t\th3: schema,\n\t\t\t\t\th4: schema,\n\t\t\t\t\th5: schema,\n\t\t\t\t\th6: schema,\n\t\t\t\t};\n\t\t\t},\n\t\t\ttransform( node ) {\n\t\t\t\tconst attributes = getBlockAttributes( name, node.outerHTML );\n\t\t\t\tconst { textAlign } = node.style || {};\n\n\t\t\t\tattributes.level = getLevelFromHeadingNodeName( node.nodeName );\n\n\t\t\t\tif (\n\t\t\t\t\ttextAlign === 'left' ||\n\t\t\t\t\ttextAlign === 'center' ||\n\t\t\t\t\ttextAlign === 'right'\n\t\t\t\t) {\n\t\t\t\t\tattributes.align = textAlign;\n\t\t\t\t}\n\n\t\t\t\treturn createBlock( name, attributes );\n\t\t\t},\n\t\t},\n\t\t...[ 2, 3, 4, 5, 6 ].map( ( level ) => ( {\n\t\t\ttype: 'prefix',\n\t\t\tprefix: Array( level + 1 ).join( '#' ),\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( name, {\n\t\t\t\t\tlevel,\n\t\t\t\t\tcontent,\n\t\t\t\t} );\n\t\t\t},\n\t\t} ) ),\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { content } ) => {\n\t\t\t\treturn createBlock( 'core/paragraph', {\n\t\t\t\t\tcontent,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default transforms;\n"]}