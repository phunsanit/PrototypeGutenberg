{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/context.js"],"names":["noop","createContext","useContext","createHigherOrderComponent","Context","name","isSelected","focusedElement","setFocusedElement","clientId","Provider","Consumer","BlockEditContextProvider","useBlockEditContext","withBlockEditContext","mapContextToProps","OriginalComponent","props","context","ifBlockEditSelected"],"mappings":";;;AAAA;;;AAGA,SAASA,IAAT,QAAqB,QAArB;AAEA;;;;AAGA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,oBAA1C;AACA,SAASC,0BAAT,QAA2C,oBAA3C;AAEA,IAAMC,OAAO,GAAGH,aAAa,CAAE;AAC9BI,EAAAA,IAAI,EAAE,EADwB;AAE9BC,EAAAA,UAAU,EAAE,KAFkB;AAG9BC,EAAAA,cAAc,EAAE,IAHc;AAI9BC,EAAAA,iBAAiB,EAAER,IAJW;AAK9BS,EAAAA,QAAQ,EAAE;AALoB,CAAF,CAA7B;IAOQC,Q,GAAuBN,O,CAAvBM,Q;IAAUC,Q,GAAaP,O,CAAbO,Q;AAElB,SAASD,QAAQ,IAAIE,wBAArB;AAEA;;;;;;AAKA,OAAO,SAASC,mBAAT,GAA+B;AACrC,SAAOX,UAAU,CAAEE,OAAF,CAAjB;AACA;AAED;;;;;;;;;;;AAUA,OAAO,IAAMU,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAEC,iBAAF;AAAA,SACnCZ,0BAA0B,CAAE,UAAEa,iBAAF,EAAyB;AACpD,WAAO,UAAEC,KAAF;AAAA,aACN,cAAC,QAAD,QACG,UAAEC,OAAF;AAAA,eACD,cAAC,iBAAD,eACMD,KADN,EAEMF,iBAAiB,CAAEG,OAAF,EAAWD,KAAX,CAFvB,EADC;AAAA,OADH,CADM;AAAA,KAAP;AAUA,GAXyB,EAWvB,sBAXuB,CADS;AAAA,CAA7B;AAcP;;;;;;;;;AAQA,OAAO,IAAME,mBAAmB,GAAGhB,0BAA0B,CAC5D,UAAEa,iBAAF,EAAyB;AACxB,SAAO,UAAEC,KAAF;AAAA,WACN,cAAC,QAAD,QACG;AAAA,UAAIX,UAAJ,QAAIA,UAAJ;AAAA,aACDA,UAAU,IAAI,cAAC,iBAAD,EAAwBW,KAAxB,CADb;AAAA,KADH,CADM;AAAA,GAAP;AAOA,CAT2D,EAU5D,qBAV4D,CAAtD","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createContext, useContext } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nconst Context = createContext( {\n\tname: '',\n\tisSelected: false,\n\tfocusedElement: null,\n\tsetFocusedElement: noop,\n\tclientId: null,\n} );\nconst { Provider, Consumer } = Context;\n\nexport { Provider as BlockEditContextProvider };\n\n/**\n * A hook that returns the block edit context.\n *\n * @return {Object} Block edit context\n */\nexport function useBlockEditContext() {\n\treturn useContext( Context );\n}\n\n/**\n * A Higher Order Component used to inject BlockEdit context to the\n * wrapped component.\n *\n * @param {Function} mapContextToProps Function called on every context change,\n *                                     expected to return object of props to\n *                                     merge with the component's own props.\n *\n * @return {WPComponent} Enhanced component with injected context as props.\n */\nexport const withBlockEditContext = ( mapContextToProps ) =>\n\tcreateHigherOrderComponent( ( OriginalComponent ) => {\n\t\treturn ( props ) => (\n\t\t\t<Consumer>\n\t\t\t\t{ ( context ) => (\n\t\t\t\t\t<OriginalComponent\n\t\t\t\t\t\t{ ...props }\n\t\t\t\t\t\t{ ...mapContextToProps( context, props ) }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</Consumer>\n\t\t);\n\t}, 'withBlockEditContext' );\n\n/**\n * A Higher Order Component used to render conditionally the wrapped\n * component only when the BlockEdit has selected state set.\n *\n * @param {WPComponent} OriginalComponent Component to wrap.\n *\n * @return {WPComponent} Component which renders only when the BlockEdit is selected.\n */\nexport const ifBlockEditSelected = createHigherOrderComponent(\n\t( OriginalComponent ) => {\n\t\treturn ( props ) => (\n\t\t\t<Consumer>\n\t\t\t\t{ ( { isSelected } ) =>\n\t\t\t\t\tisSelected && <OriginalComponent { ...props } />\n\t\t\t\t}\n\t\t\t</Consumer>\n\t\t);\n\t},\n\t'ifBlockEditSelected'\n);\n"]}