{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/edit.js"],"names":["classnames","pick","withFilters","getBlockDefaultClassName","hasBlockSupport","getBlockType","useContext","useMemo","BlockContext","DEFAULT_BLOCK_CONTEXT","Edit","props","attributes","name","blockType","blockContext","context","Component","edit","save","lightBlockWrapper","generatedClassName","className"],"mappings":";;;AAAA;;;AAGA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA;;;;AAGA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SACCC,wBADD,EAECC,eAFD,EAGCC,YAHD,QAIO,mBAJP;AAKA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,oBAApC;AAEA;;;;AAGA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA;;;;;;;;;AAQA,IAAMC,qBAAqB,GAAG,EAA9B;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAEC,KAAF,EAAa;AAAA,0BACEA,KADF,CACxBC,UADwB;AAAA,MACxBA,UADwB,kCACX,EADW;AAAA,MACPC,IADO,GACEF,KADF,CACPE,IADO;AAEhC,MAAMC,SAAS,GAAGT,YAAY,CAAEQ,IAAF,CAA9B;AACA,MAAME,YAAY,GAAGT,UAAU,CAAEE,YAAF,CAA/B,CAHgC,CAKhC;;AACA,MAAMQ,OAAO,GAAGT,OAAO,CACtB;AAAA,WACCO,SAAS,IAAIA,SAAS,CAACE,OAAvB,GACGf,IAAI,CAAEc,YAAF,EAAgBD,SAAS,CAACE,OAA1B,CADP,GAEGP,qBAHJ;AAAA,GADsB,EAKtB,CAAEK,SAAF,EAAaC,YAAb,CALsB,CAAvB;;AAQA,MAAK,CAAED,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA,GAhB+B,CAkBhC;AACA;AACA;;;AACA,MAAMG,SAAS,GAAGH,SAAS,CAACI,IAAV,IAAkBJ,SAAS,CAACK,IAA9C;AACA,MAAMC,iBAAiB,GAAGhB,eAAe,CACxCU,SADwC,EAExC,mBAFwC,EAGxC,KAHwC,CAAzC;;AAMA,MAAKM,iBAAL,EAAyB;AACxB,WAAO,cAAC,SAAD,eAAgBT,KAAhB;AAAwB,MAAA,OAAO,EAAGK;AAAlC,OAAP;AACA,GA9B+B,CAgChC;;;AACA,MAAMK,kBAAkB,GAAGjB,eAAe,CAAEU,SAAF,EAAa,WAAb,EAA0B,IAA1B,CAAf,GACxBX,wBAAwB,CAAEU,IAAF,CADA,GAExB,IAFH;AAGA,MAAMS,SAAS,GAAGtB,UAAU,CAAEqB,kBAAF,EAAsBT,UAAU,CAACU,SAAjC,CAA5B;AAEA,SACC,cAAC,SAAD,eAAgBX,KAAhB;AAAwB,IAAA,OAAO,EAAGK,OAAlC;AAA4C,IAAA,SAAS,EAAGM;AAAxD,KADD;AAGA,CAzCM;AA2CP,eAAepB,WAAW,CAAE,kBAAF,CAAX,CAAmCQ,IAAnC,CAAf","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { pick } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { withFilters } from '@wordpress/components';\nimport {\n\tgetBlockDefaultClassName,\n\thasBlockSupport,\n\tgetBlockType,\n} from '@wordpress/blocks';\nimport { useContext, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport BlockContext from '../block-context';\n\n/**\n * Default value used for blocks which do not define their own context needs,\n * used to guarantee that a block's `context` prop will always be an object. It\n * is assigned as a constant since it is always expected to be an empty object,\n * and in order to avoid unnecessary React reconciliations of a changing object.\n *\n * @type {{}}\n */\nconst DEFAULT_BLOCK_CONTEXT = {};\n\nexport const Edit = ( props ) => {\n\tconst { attributes = {}, name } = props;\n\tconst blockType = getBlockType( name );\n\tconst blockContext = useContext( BlockContext );\n\n\t// Assign context values using the block type's declared context needs.\n\tconst context = useMemo(\n\t\t() =>\n\t\t\tblockType && blockType.context\n\t\t\t\t? pick( blockContext, blockType.context )\n\t\t\t\t: DEFAULT_BLOCK_CONTEXT,\n\t\t[ blockType, blockContext ]\n\t);\n\n\tif ( ! blockType ) {\n\t\treturn null;\n\t}\n\n\t// `edit` and `save` are functions or components describing the markup\n\t// with which a block is displayed. If `blockType` is valid, assign\n\t// them preferentially as the render value for the block.\n\tconst Component = blockType.edit || blockType.save;\n\tconst lightBlockWrapper = hasBlockSupport(\n\t\tblockType,\n\t\t'lightBlockWrapper',\n\t\tfalse\n\t);\n\n\tif ( lightBlockWrapper ) {\n\t\treturn <Component { ...props } context={ context } />;\n\t}\n\n\t// Generate a class name for the block's editable form\n\tconst generatedClassName = hasBlockSupport( blockType, 'className', true )\n\t\t? getBlockDefaultClassName( name )\n\t\t: null;\n\tconst className = classnames( generatedClassName, attributes.className );\n\n\treturn (\n\t\t<Component { ...props } context={ context } className={ className } />\n\t);\n};\n\nexport default withFilters( 'editor.BlockEdit' )( Edit );\n"]}