{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/block-patterns.js"],"names":["map","fromPairs","useMemo","useCallback","parse","cloneBlock","useDispatch","useSelect","ENTER","SPACE","__","sprintf","_x","BlockPreview","useAsyncList","InserterPanel","searchItems","InserterNoResults","usePatternsState","onInsert","select","getSettings","__experimentalBlockPatterns","__experimentalBlockPatternCategories","patterns","patternCategories","createSuccessNotice","onClickPattern","pattern","blocks","block","title","type","BlockPattern","onClick","content","viewportWidth","event","keyCode","BlockPatternPlaceholder","BlockPatternList","shownPatterns","isShown","includes","name","BlockPatternsSearchResults","filterValue","currentShownPatterns","filteredPatterns","length","BlockPatternsPerCategories","categories","getPatternIndex","Infinity","indexedCategories","index","Math","min","category","undefined","orderedPatterns","sort","a","b","uncategorizedPatterns","filter","patternCategory","categoryPatterns","label","BlockPatterns"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { map, fromPairs } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useMemo, useCallback } from '@wordpress/element';\nimport { parse, cloneBlock } from '@wordpress/blocks';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { ENTER, SPACE } from '@wordpress/keycodes';\nimport { __, sprintf, _x } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport BlockPreview from '../block-preview';\nimport useAsyncList from './use-async-list';\nimport InserterPanel from './panel';\nimport { searchItems } from './search-items';\nimport InserterNoResults from './no-results';\n\nconst usePatternsState = ( onInsert ) => {\n\tconst { patternCategories, patterns } = useSelect( ( select ) => {\n\t\tconst {\n\t\t\t__experimentalBlockPatterns,\n\t\t\t__experimentalBlockPatternCategories,\n\t\t} = select( 'core/block-editor' ).getSettings();\n\t\treturn {\n\t\t\tpatterns: __experimentalBlockPatterns,\n\t\t\tpatternCategories: __experimentalBlockPatternCategories,\n\t\t};\n\t}, [] );\n\tconst { createSuccessNotice } = useDispatch( 'core/notices' );\n\tconst onClickPattern = useCallback( ( pattern, blocks ) => {\n\t\tonInsert( map( blocks, ( block ) => cloneBlock( block ) ) );\n\t\tcreateSuccessNotice(\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: block pattern title. */\n\t\t\t\t__( 'Pattern \"%s\" inserted.' ),\n\t\t\t\tpattern.title\n\t\t\t),\n\t\t\t{\n\t\t\t\ttype: 'snackbar',\n\t\t\t}\n\t\t);\n\t}, [] );\n\n\treturn [ patterns, patternCategories, onClickPattern ];\n};\n\nfunction BlockPattern( { pattern, onClick } ) {\n\tconst { content, viewportWidth } = pattern;\n\tconst blocks = useMemo( () => parse( content ), [ content ] );\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"block-editor-inserter__patterns-item\"\n\t\t\trole=\"button\"\n\t\t\tonClick={ () => onClick( pattern, blocks ) }\n\t\t\tonKeyDown={ ( event ) => {\n\t\t\t\tif ( ENTER === event.keyCode || SPACE === event.keyCode ) {\n\t\t\t\t\tonClick( pattern, blocks );\n\t\t\t\t}\n\t\t\t} }\n\t\t\ttabIndex={ 0 }\n\t\t\taria-label={ pattern.title }\n\t\t>\n\t\t\t<BlockPreview blocks={ blocks } viewportWidth={ viewportWidth } />\n\t\t\t<div className=\"block-editor-inserter__patterns-item-title\">\n\t\t\t\t{ pattern.title }\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction BlockPatternPlaceholder() {\n\treturn (\n\t\t<div className=\"block-editor-inserter__patterns-item is-placeholder\" />\n\t);\n}\n\nfunction BlockPatternList( { patterns, shownPatterns, onClickPattern } ) {\n\treturn patterns.map( ( pattern ) => {\n\t\tconst isShown = shownPatterns.includes( pattern );\n\t\treturn isShown ? (\n\t\t\t<BlockPattern\n\t\t\t\tkey={ pattern.name }\n\t\t\t\tpattern={ pattern }\n\t\t\t\tonClick={ onClickPattern }\n\t\t\t/>\n\t\t) : (\n\t\t\t<BlockPatternPlaceholder key={ pattern.name } />\n\t\t);\n\t} );\n}\n\nfunction BlockPatternsSearchResults( { filterValue, onInsert } ) {\n\tconst [ patterns, , onClick ] = usePatternsState( onInsert );\n\tconst currentShownPatterns = useAsyncList( patterns );\n\n\tconst filteredPatterns = useMemo(\n\t\t() => searchItems( patterns, filterValue ),\n\t\t[ filterValue, patterns ]\n\t);\n\n\tif ( filterValue ) {\n\t\treturn !! filteredPatterns.length ? (\n\t\t\t<InserterPanel title={ __( 'Search Results' ) }>\n\t\t\t\t<BlockPatternList\n\t\t\t\t\tshownPatterns={ currentShownPatterns }\n\t\t\t\t\tpatterns={ filteredPatterns }\n\t\t\t\t\tonClickPattern={ onClick }\n\t\t\t\t/>\n\t\t\t</InserterPanel>\n\t\t) : (\n\t\t\t<InserterNoResults />\n\t\t);\n\t}\n}\n\nfunction BlockPatternsPerCategories( { onInsert } ) {\n\tconst [ patterns, categories, onClick ] = usePatternsState( onInsert );\n\n\tconst getPatternIndex = useCallback(\n\t\t( pattern ) => {\n\t\t\tif ( ! pattern.categories || ! pattern.categories.length ) {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t\tconst indexedCategories = fromPairs(\n\t\t\t\tcategories.map( ( { name }, index ) => [ name, index ] )\n\t\t\t);\n\t\t\treturn Math.min(\n\t\t\t\t...pattern.categories.map( ( category ) =>\n\t\t\t\t\tindexedCategories[ category ] !== undefined\n\t\t\t\t\t\t? indexedCategories[ category ]\n\t\t\t\t\t\t: Infinity\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t\t[ categories ]\n\t);\n\n\t// Ordering the patterns per category is important for the async rendering.\n\tconst orderedPatterns = useMemo( () => {\n\t\treturn patterns.sort( ( a, b ) => {\n\t\t\treturn getPatternIndex( a ) - getPatternIndex( b );\n\t\t} );\n\t}, [ patterns, getPatternIndex ] );\n\n\tconst currentShownPatterns = useAsyncList( orderedPatterns );\n\n\t// Uncategorized Patterns\n\tconst uncategorizedPatterns = useMemo(\n\t\t() =>\n\t\t\tpatterns.filter(\n\t\t\t\t( pattern ) => getPatternIndex( pattern ) === Infinity\n\t\t\t),\n\t\t[ patterns, getPatternIndex ]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{ categories.map( ( patternCategory ) => {\n\t\t\t\tconst categoryPatterns = patterns.filter(\n\t\t\t\t\t( pattern ) =>\n\t\t\t\t\t\tpattern.categories &&\n\t\t\t\t\t\tpattern.categories.includes( patternCategory.name )\n\t\t\t\t);\n\t\t\t\treturn (\n\t\t\t\t\t!! categoryPatterns.length && (\n\t\t\t\t\t\t<InserterPanel\n\t\t\t\t\t\t\tkey={ patternCategory.name }\n\t\t\t\t\t\t\ttitle={ patternCategory.label }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<BlockPatternList\n\t\t\t\t\t\t\t\tshownPatterns={ currentShownPatterns }\n\t\t\t\t\t\t\t\tpatterns={ categoryPatterns }\n\t\t\t\t\t\t\t\tonClickPattern={ onClick }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</InserterPanel>\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} ) }\n\n\t\t\t{ !! uncategorizedPatterns.length && (\n\t\t\t\t<InserterPanel title={ _x( 'Uncategorized' ) }>\n\t\t\t\t\t<BlockPatternList\n\t\t\t\t\t\tshownPatterns={ currentShownPatterns }\n\t\t\t\t\t\tpatterns={ uncategorizedPatterns }\n\t\t\t\t\t\tonClickPattern={ onClick }\n\t\t\t\t\t/>\n\t\t\t\t</InserterPanel>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nfunction BlockPatterns( { onInsert, filterValue } ) {\n\treturn filterValue ? (\n\t\t<BlockPatternsSearchResults\n\t\t\tonInsert={ onInsert }\n\t\t\tfilterValue={ filterValue }\n\t\t/>\n\t) : (\n\t\t<BlockPatternsPerCategories onInsert={ onInsert } />\n\t);\n}\n\nexport default BlockPatterns;\n"]}