{"version":3,"sources":["@wordpress/block-editor/src/components/block-mobile-toolbar/index.native.js"],"names":["BREAKPOINTS","wrapSettings","wrapMover","BlockMobileToolbar","clientId","onDelete","isStackedHorizontally","blockWidth","anchorNodeRef","wrapBlockSettings","wrapBlockMover","styles","toolbar","spacer","fills","select","getBlockIndex","order","dispatch","rootClientId","removeBlock"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AAjBA;;;;AAKA;;;;AAMA;;;AAQA;AACA;AACA;AACA,IAAMA,WAAW,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAApB;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAMpB;AAAA,MALNC,QAKM,QALNA,QAKM;AAAA,MAJNC,QAIM,QAJNA,QAIM;AAAA,MAHNC,qBAGM,QAHNA,qBAGM;AAAA,MAFNC,UAEM,QAFNA,UAEM;AAAA,MADNC,aACM,QADNA,aACM;AACN,MAAMC,iBAAiB,GAAGF,UAAU,GAAGP,WAAW,CAACC,YAAnD;AACA,MAAMS,cAAc,GAAGH,UAAU,IAAIP,WAAW,CAACE,SAAjD;AAEA,SACC,4BAAC,iBAAD;AAAM,IAAA,KAAK,EAAGS,eAAOC;AAArB,KACG,CAAEF,cAAF,IACD,4BAAC,mBAAD;AACC,IAAA,SAAS,EAAG,CAAEN,QAAF,CADb;AAEC,IAAA,qBAAqB,EAAGE;AAFzB,IAFF,EAQC,4BAAC,iBAAD;AAAM,IAAA,KAAK,EAAGK,eAAOE;AAArB,IARD,EAUG,CAAEJ,iBAAF,IACD,4BAAC,kCAAD,CAAqB,IAArB,QAEG;AAAA,QAAEK,KAAF,uEAAU,CAAE,IAAF,CAAV;AAAA,WAAwBA,KAAK,CAAE,CAAF,CAA7B;AAAA,GAFH,CAXF,EAiBC,4BAAC,yBAAD;AACC,IAAA,SAAS,EAAG,CAAEV,QAAF,CADb;AAEC,IAAA,cAAc,EAAGM,cAFlB;AAGC,IAAA,iBAAiB,EAAGD,iBAHrB;AAIC,IAAA,qBAAqB,EAAGH,qBAJzB;AAKC,IAAA,QAAQ,EAAGD,QALZ;AAMC,IAAA,aAAa,EAAGG;AANjB,IAjBD,CADD;AA4BA,CAtCD;;eAwCe,sBACd,sBAAY,UAAEO,MAAF,SAA4B;AAAA,MAAhBX,QAAgB,SAAhBA,QAAgB;;AAAA,gBACbW,MAAM,CAAE,mBAAF,CADO;AAAA,MAC/BC,aAD+B,WAC/BA,aAD+B;;AAGvC,SAAO;AACNC,IAAAA,KAAK,EAAED,aAAa,CAAEZ,QAAF;AADd,GAAP;AAGA,CAND,CADc,EAQd,wBAAc,UAAEc,QAAF,SAAsD;AAAA,MAAxCd,QAAwC,SAAxCA,QAAwC;AAAA,MAA9Be,YAA8B,SAA9BA,YAA8B;AAAA,MAAhBd,QAAgB,SAAhBA,QAAgB;;AAAA,kBAC3Ca,QAAQ,CAAE,mBAAF,CADmC;AAAA,MAC3DE,WAD2D,aAC3DA,WAD2D;;AAEnE,SAAO;AACNf,IAAAA,QAAQ,EACPA,QAAQ,IAAM;AAAA,aAAMe,WAAW,CAAEhB,QAAF,EAAYe,YAAZ,CAAjB;AAAA;AAFT,GAAP;AAIA,CAND,CARc,EAeZhB,kBAfY,C","sourcesContent":["/**\n * External dependencies\n */\nimport { View } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport styles from './style.scss';\nimport BlockMover from '../block-mover';\nimport BlockActionsMenu from './block-actions-menu';\nimport { BlockSettingsButton } from '../block-settings';\n\n// Defined breakpoints are used to get a point when\n// `settings` and `mover` controls should be wrapped into `BlockActionsMenu`\n// and accessed through `BottomSheet`(Android)/`ActionSheet`(iOS).\nconst BREAKPOINTS = {\n\twrapSettings: 65,\n\twrapMover: 150,\n};\nconst BlockMobileToolbar = ( {\n\tclientId,\n\tonDelete,\n\tisStackedHorizontally,\n\tblockWidth,\n\tanchorNodeRef,\n} ) => {\n\tconst wrapBlockSettings = blockWidth < BREAKPOINTS.wrapSettings;\n\tconst wrapBlockMover = blockWidth <= BREAKPOINTS.wrapMover;\n\n\treturn (\n\t\t<View style={ styles.toolbar }>\n\t\t\t{ ! wrapBlockMover && (\n\t\t\t\t<BlockMover\n\t\t\t\t\tclientIds={ [ clientId ] }\n\t\t\t\t\tisStackedHorizontally={ isStackedHorizontally }\n\t\t\t\t/>\n\t\t\t) }\n\n\t\t\t<View style={ styles.spacer } />\n\n\t\t\t{ ! wrapBlockSettings && (\n\t\t\t\t<BlockSettingsButton.Slot>\n\t\t\t\t\t{ /* Render only one settings icon even if we have more than one fill - need for hooks with controls */ }\n\t\t\t\t\t{ ( fills = [ null ] ) => fills[ 0 ] }\n\t\t\t\t</BlockSettingsButton.Slot>\n\t\t\t) }\n\n\t\t\t<BlockActionsMenu\n\t\t\t\tclientIds={ [ clientId ] }\n\t\t\t\twrapBlockMover={ wrapBlockMover }\n\t\t\t\twrapBlockSettings={ wrapBlockSettings }\n\t\t\t\tisStackedHorizontally={ isStackedHorizontally }\n\t\t\t\tonDelete={ onDelete }\n\t\t\t\tanchorNodeRef={ anchorNodeRef }\n\t\t\t/>\n\t\t</View>\n\t);\n};\n\nexport default compose(\n\twithSelect( ( select, { clientId } ) => {\n\t\tconst { getBlockIndex } = select( 'core/block-editor' );\n\n\t\treturn {\n\t\t\torder: getBlockIndex( clientId ),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { clientId, rootClientId, onDelete } ) => {\n\t\tconst { removeBlock } = dispatch( 'core/block-editor' );\n\t\treturn {\n\t\t\tonDelete:\n\t\t\t\tonDelete || ( () => removeBlock( clientId, rootClientId ) ),\n\t\t};\n\t} )\n)( BlockMobileToolbar );\n"]}