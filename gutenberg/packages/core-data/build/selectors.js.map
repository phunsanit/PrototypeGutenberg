{"version":3,"sources":["@wordpress/core-data/src/selectors.js"],"names":["isRequestingEmbedPreview","select","state","url","isResolving","REDUCER_KEY","getAuthors","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","entities","config","getEntity","name","getEntityRecord","key","data","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","getEntityRecords","query","queriedState","__experimentalGetDirtyEntityRecords","dirtyRecords","forEach","primaryKeys","edits","filter","primaryKey","hasEditsForEntityRecord","length","entity","entityRecord","push","DEFAULT_ENTITY_KEY","title","getTitle","getEntityRecordEdits","recordId","getEntityRecordNonTransientEdits","transientEdits","acc","isSavingEntityRecord","getEditedEntityRecord","isAutosavingEntityRecord","pending","isAutosave","Boolean","getLastEntitySaveError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","themes","currentTheme","getThemeSupports","themeSupports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","hasUploadPermissions","alternative","canUser","action","resource","join","getAutosaves","postType","postId","autosaves","getAutosave","authorId","undefined","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { map, find, get, filter, compact, defaultTo } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { REDUCER_KEY } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state, url ) => {\n\t\treturn select( 'core/data' ).isResolving(\n\t\t\tREDUCER_KEY,\n\t\t\t'getEmbedPreview',\n\t\t\t[ url ]\n\t\t);\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Authors list.\n */\nexport function getAuthors( state ) {\n\treturn getUserQueryResults( state, 'authors' );\n}\n\n/**\n * Returns the current user.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Current user object.\n */\nexport function getCurrentUser( state ) {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {boolean} Whether the entities are loaded\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object?} Record.\n */\nexport function getEntityRecord( state, kind, name, key ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t\t'items',\n\t\tkey,\n\t] );\n}\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity from the API if the entity record isn't available in the local state.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object?} Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate,\n\tkind,\n\tname,\n\tkey\n) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param {Object} state  State tree.\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key.\n *\n * @return {Object?} Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t( state, kind, name, key ) => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t'raw',\n\t\t\t\t\trecord[ _key ]\n\t\t\t\t);\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state  State tree\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {?Object} query  Optional terms query.\n *\n * @return {?Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn [];\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Returns the  list of dirty entity records.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { data },\n\t\t} = state;\n\t\tconst dirtyRecords = [];\n\t\tObject.keys( data ).forEach( ( kind ) => {\n\t\t\tObject.keys( data[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\tdata[ kind ][ name ].edits\n\t\t\t\t).filter( ( primaryKey ) =>\n\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entity = getEntity( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle: ! entity.getTitle\n\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t: entity.getTitle( entityRecord ),\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's edits.\n */\nexport function getEntityRecordEdits( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t( state, kind, name, recordId ) => {\n\t\tconst { transientEdits } = getEntity( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state ) => [ state.entities.config, state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord( state, kind, name, recordId ) {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t( state, kind, name, recordId ) => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord( state, kind, name, recordId ) {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntitySaveError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param {Object} state State tree.\n *\n * @return {number} The current undo offset.\n */\nfunction getCurrentUndoOffset( state ) {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getUndoEdit( state ) {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getRedoEdit( state ) {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a previous edit or not.\n */\nexport function hasUndo( state ) {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a next edit or not.\n */\nexport function hasRedo( state ) {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param {Object} state Data state.\n *\n * @return {Object}      The current theme.\n */\nexport function getCurrentTheme( state ) {\n\treturn state.themes[ state.currentTheme ];\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*}           Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn state.themeSupports;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {boolean} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can upload media.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *             `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n *\n * @param {Object} state Data state.\n *\n * @return {boolean} Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n *                   request is being made.\n */\nexport function hasUploadPermissions( state ) {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\treturn defaultTo( canUser( state, 'create', 'media' ), true );\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}   state            Data state.\n * @param {string}   action           Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}   resource         REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=}  id               Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {?Array} An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves( state, postType, postId ) {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n * @param {number} authorId The id of the author.\n *\n * @return {?Object} The autosave for the post and author.\n */\nexport function getAutosave( state, postType, postId, authorId ) {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param {Object} state State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {boolean} True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => ( state, postType, postId ) => {\n\t\treturn select( REDUCER_KEY ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [ state.undo.length, state.undo.offset ]\n);\n"]}