{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","getCurrentUser","getEntityRecord","getEntityRecords","getCurrentTheme","getThemeSupports","getEmbedPreview","hasUploadPermissions","canUser","getAutosaves","getAutosave","path","users","currentUser","kind","name","key","entities","entity","baseURL","record","getRawEntityRecord","getEditedEntityRecord","query","context","records","Object","values","shouldInvalidate","action","type","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse","alternative","resource","id","methods","create","read","update","delete","method","Error","parse","response","allowHeader","headers","get","join","isAllowed","postType","postId","restBase","rest_base","autosaves","length"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities } from './entities';\nimport { apiFetch, resolveSelect } from './controls';\nimport { ifNotResolved } from './utils';\n\n/**\n * Requests authors from the REST API.\n */\nexport function* getAuthors() {\n\tconst users = yield apiFetch( {\n\t\tpath: '/wp/v2/users/?who=authors&per_page=-1',\n\t} );\n\tyield receiveUserQuery( 'authors', users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n */\nexport function* getEntityRecord( kind, name, key = '' ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst record = yield apiFetch( {\n\t\tpath: `${ entity.baseURL }/${ key }?context=edit`,\n\t} );\n\tyield receiveEntityRecords( kind, name, record );\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst path = addQueryArgs( entity.baseURL, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\tconst records = yield apiFetch( { path } );\n\tyield receiveEntityRecords( kind, name, Object.values( records ), query );\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\taction.type === 'RECEIVE_ITEMS' &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Requests Upload Permissions from the REST API.\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n */\nexport function* hasUploadPermissions() {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\tyield* canUser( 'create', 'media' );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield resolveSelect(\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield resolveSelect( 'getAutosaves', postType, postId );\n}\n"]}