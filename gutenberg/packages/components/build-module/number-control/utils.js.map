{"version":3,"sources":["@wordpress/components/src/number-control/utils.js"],"names":["clamp","getNumberValue","value","number","Number","isNaN","getValue","parsedValue","parseFloat","add","a","b","subtract","roundClamp","min","Infinity","max","step","baseValue","stepValue","rounded","Math","round","clampedValue","roundClampString","toString"],"mappings":"AAAA;;;AAGA,SAASA,KAAT,QAAsB,QAAtB;AAEA;;;;;;;AAMA,SAASC,cAAT,CAAyBC,KAAzB,EAAiC;AAChC,MAAMC,MAAM,GAAGC,MAAM,CAAEF,KAAF,CAArB;AAEA,SAAOG,KAAK,CAAEF,MAAF,CAAL,GAAkB,CAAlB,GAAsBA,MAA7B;AACA;AAED;;;;;;;;AAMA,OAAO,SAASG,QAAT,CAAmBJ,KAAnB,EAA2B;AACjC,MAAMK,WAAW,GAAGC,UAAU,CAAEN,KAAF,CAA9B;AAEA,SAAOG,KAAK,CAAEE,WAAF,CAAL,GAAuBL,KAAvB,GAA+BK,WAAtC;AACA;AAED;;;;;;;;AAOA,OAAO,SAASE,GAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAqB;AAC3B,SAAOV,cAAc,CAAES,CAAF,CAAd,GAAsBT,cAAc,CAAEU,CAAF,CAA3C;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,QAAT,CAAmBF,CAAnB,EAAsBC,CAAtB,EAA0B;AAChC,SAAOV,cAAc,CAAES,CAAF,CAAd,GAAsBT,cAAc,CAAEU,CAAF,CAA3C;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASE,UAAT,GAKL;AAAA,MAJDX,KAIC,uEAJO,CAIP;AAAA,MAHDY,GAGC,uEAHKC,QAGL;AAAA,MAFDC,GAEC,uEAFKD,QAEL;AAAA,MADDE,IACC,uEADM,CACN;AACD,MAAMC,SAAS,GAAGjB,cAAc,CAAEC,KAAF,CAAhC;AACA,MAAMiB,SAAS,GAAGlB,cAAc,CAAEgB,IAAF,CAAhC;AACA,MAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYJ,SAAS,GAAGC,SAAxB,IAAsCA,SAAtD;AACA,MAAMI,YAAY,GAAGvB,KAAK,CAAEoB,OAAF,EAAWN,GAAX,EAAgBE,GAAhB,CAA1B;AAEA,SAAOO,YAAP;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASC,gBAAT,GAAqC;AAC3C,SAAOX,UAAU,MAAV,oBAAsBY,QAAtB,EAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { clamp } from 'lodash';\n\n/**\n * Parses and retrieves a number value.\n *\n * @param {any} value The incoming value.\n * @return {number} The parsed number value.\n */\nfunction getNumberValue( value ) {\n\tconst number = Number( value );\n\n\treturn isNaN( number ) ? 0 : number;\n}\n\n/**\n * Parses a value to safely store value state.\n *\n * @param {any} value The incoming value.\n * @return {number} The parsed number value.\n */\nexport function getValue( value ) {\n\tconst parsedValue = parseFloat( value );\n\n\treturn isNaN( parsedValue ) ? value : parsedValue;\n}\n\n/**\n * Safely adds 2 values.\n *\n * @param {any} a First value.\n * @param {any} b Second value.\n * @return {number} The sum of the 2 values.\n */\nexport function add( a, b ) {\n\treturn getNumberValue( a ) + getNumberValue( b );\n}\n\n/**\n * Safely subtracts 2 values.\n *\n * @param {any} a First value.\n * @param {any} b Second value.\n * @return {number} The difference of the 2 values.\n */\nexport function subtract( a, b ) {\n\treturn getNumberValue( a ) - getNumberValue( b );\n}\n\n/**\n * Clamps a value based on a min/max range with rounding\n *\n * @param {number} value The value.\n * @param {number} min The minimum range.\n * @param {number} max The maximum range.\n * @param {number} step A multiplier for the value.\n * @return {number} The rounded and clamped value.\n */\nexport function roundClamp(\n\tvalue = 0,\n\tmin = Infinity,\n\tmax = Infinity,\n\tstep = 1\n) {\n\tconst baseValue = getNumberValue( value );\n\tconst stepValue = getNumberValue( step );\n\tconst rounded = Math.round( baseValue / stepValue ) * stepValue;\n\tconst clampedValue = clamp( rounded, min, max );\n\n\treturn clampedValue;\n}\n\n/**\n * Clamps a value based on a min/max range with rounding.\n * Returns a string.\n *\n * @param {any} args Arguments for roundClamp().\n * @property {number} value The value.\n * @property {number} min The minimum range.\n * @property {number} max The maximum range.\n * @property {number} step A multiplier for the value.\n * @return {string} The rounded and clamped value.\n */\nexport function roundClampString( ...args ) {\n\treturn roundClamp( ...args ).toString();\n}\n"]}