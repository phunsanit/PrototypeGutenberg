{"version":3,"sources":["@wordpress/components/src/range-control/input-field.js"],"names":["noop","ENTER","useControlledState","InputNumber","InputField","label","onBlur","onChange","onReset","onKeyDown","valueProp","value","props","setValue","handleOnReset","event","handleOnCommit","nextValue","parseFloat","target","isNaN","checkValidity","handleOnBlur","handleOnChange","handleOnKeyDown","keyCode","preventDefault"],"mappings":";;;;;AAAA;;;AAGA,SAASA,IAAT,QAAqB,QAArB;AAEA;;;;AAGA,SAASC,KAAT,QAAsB,qBAAtB;AAEA;;;;AAGA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA,eAAe,SAASC,UAAT,OAQX;AAAA,MAPHC,KAOG,QAPHA,KAOG;AAAA,yBANHC,MAMG;AAAA,MANHA,MAMG,4BANMN,IAMN;AAAA,2BALHO,QAKG;AAAA,MALHA,QAKG,8BALQP,IAKR;AAAA,0BAJHQ,OAIG;AAAA,MAJHA,OAIG,6BAJOR,IAIP;AAAA,4BAHHS,SAGG;AAAA,MAHHA,SAGG,+BAHST,IAGT;AAAA,MAFIU,SAEJ,QAFHC,KAEG;AAAA,MADAC,KACA;;AACH;;;;;;;;;AADG,4BAUyBV,kBAAkB,CAAEQ,SAAF,CAV3C;AAAA;AAAA,MAUKC,KAVL;AAAA,MAUYE,QAVZ;;AAYH,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAEC,KAAF,EAAa;AAClCP,IAAAA,OAAO,CAAEO,KAAF,CAAP;AACAF,IAAAA,QAAQ,CAAE,EAAF,CAAR;AACA,GAHD;;AAKA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAED,KAAF,EAAa;AACnC,QAAME,SAAS,GAAGC,UAAU,CAAEH,KAAK,CAACI,MAAN,CAAaR,KAAf,CAA5B;;AAEA,QAAKS,KAAK,CAAEH,SAAF,CAAV,EAA0B;AACzBH,MAAAA,aAAa;AACb;AACA,KANkC,CAQnC;;;AACA,QAAKC,KAAK,CAACI,MAAN,CAAaE,aAAb,IAA8B,CAAEN,KAAK,CAACI,MAAN,CAAaE,aAAb,EAArC,EAAoE;AACnE;AACAR,MAAAA,QAAQ,CAAEH,SAAF,CAAR;AACA;AACA;;AACDH,IAAAA,QAAQ,CAAEQ,KAAF,CAAR;AACA,GAfD;;AAiBA,MAAMO,YAAY,GAAG,SAAfA,YAAe,CAAEP,KAAF,EAAa;AACjCT,IAAAA,MAAM,CAAES,KAAF,CAAN;AACAC,IAAAA,cAAc,CAAED,KAAF,CAAd;AACA,GAHD;;AAKA,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAER,KAAF,EAAa;AACnCF,IAAAA,QAAQ,CAAEE,KAAK,CAACI,MAAN,CAAaR,KAAf,CAAR;AAEA;;;;;;;;;AAQA,QAAKI,KAAK,CAACI,MAAN,CAAaE,aAAb,IAA8B,CAAEN,KAAK,CAACI,MAAN,CAAaE,aAAb,EAArC,EAAoE;AACnE;AACA;;AAEDL,IAAAA,cAAc,CAAED,KAAF,CAAd;AACA,GAhBD;;AAkBA,MAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAAET,KAAF,EAAa;AAAA,QAC5BU,OAD4B,GAChBV,KADgB,CAC5BU,OAD4B;AAEpChB,IAAAA,SAAS,CAAEM,KAAF,CAAT;;AAEA,QAAKU,OAAO,KAAKxB,KAAjB,EAAyB;AACxBc,MAAAA,KAAK,CAACW,cAAN;AACAV,MAAAA,cAAc,CAAED,KAAF,CAAd;AACA;AACD,GARD;;AAUA,SACC,cAAC,WAAD;AACC,kBAAaV,KADd;AAEC,IAAA,SAAS,EAAC,kCAFX;AAGC,IAAA,SAAS,EAAC,SAHX;AAIC,IAAA,MAAM,EAAGiB,YAJV;AAKC,IAAA,QAAQ,EAAGC,cALZ;AAMC,IAAA,SAAS,EAAGC,eANb;AAOC,IAAA,IAAI,EAAC,QAPN;AAQC,IAAA,KAAK,EAAGb;AART,KASMC,KATN,EADD;AAaA","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { ENTER } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport { useControlledState } from '../utils/hooks';\nimport { InputNumber } from './styles/range-control-styles';\n\nexport default function InputField( {\n\tlabel,\n\tonBlur = noop,\n\tonChange = noop,\n\tonReset = noop,\n\tonKeyDown = noop,\n\tvalue: valueProp,\n\t...props\n} ) {\n\t/**\n\t * This component stores an internal (input) value state, derived from\n\t * the incoming value prop.\n\t *\n\t * This allows for the <input /> to be updated independently before the\n\t * value is applied and propagated. This independent updating action is\n\t * necessary to accommodate individual keystroke values that may not\n\t * be considered \"valid\" (e.g. within the min - max range).\n\t */\n\tconst [ value, setValue ] = useControlledState( valueProp );\n\n\tconst handleOnReset = ( event ) => {\n\t\tonReset( event );\n\t\tsetValue( '' );\n\t};\n\n\tconst handleOnCommit = ( event ) => {\n\t\tconst nextValue = parseFloat( event.target.value );\n\n\t\tif ( isNaN( nextValue ) ) {\n\t\t\thandleOnReset();\n\t\t\treturn;\n\t\t}\n\n\t\t// Only propagate the event if the value is valid.\n\t\tif ( event.target.checkValidity && ! event.target.checkValidity() ) {\n\t\t\t// Otherwise... reset to initial value\n\t\t\tsetValue( valueProp );\n\t\t\treturn;\n\t\t}\n\t\tonChange( event );\n\t};\n\n\tconst handleOnBlur = ( event ) => {\n\t\tonBlur( event );\n\t\thandleOnCommit( event );\n\t};\n\n\tconst handleOnChange = ( event ) => {\n\t\tsetValue( event.target.value );\n\n\t\t/**\n\t\t * Prevent submitting if changes are invalid.\n\t\t * This only applies to values being entered via KEY_DOWN.\n\t\t *\n\t\t * Pressing the up/down arrows of the HTML input also triggers a\n\t\t * change event. However, those values will be (pre)validated by the\n\t\t * HTML input.\n\t\t */\n\t\tif ( event.target.checkValidity && ! event.target.checkValidity() ) {\n\t\t\treturn;\n\t\t}\n\n\t\thandleOnCommit( event );\n\t};\n\n\tconst handleOnKeyDown = ( event ) => {\n\t\tconst { keyCode } = event;\n\t\tonKeyDown( event );\n\n\t\tif ( keyCode === ENTER ) {\n\t\t\tevent.preventDefault();\n\t\t\thandleOnCommit( event );\n\t\t}\n\t};\n\n\treturn (\n\t\t<InputNumber\n\t\t\taria-label={ label }\n\t\t\tclassName=\"components-range-control__number\"\n\t\t\tinputMode=\"decimal\"\n\t\t\tonBlur={ handleOnBlur }\n\t\t\tonChange={ handleOnChange }\n\t\t\tonKeyDown={ handleOnKeyDown }\n\t\t\ttype=\"number\"\n\t\t\tvalue={ value }\n\t\t\t{ ...props }\n\t\t/>\n\t);\n}\n"]}