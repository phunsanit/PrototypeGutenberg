{"version":3,"sources":["@wordpress/components/src/input-control/utils.js"],"names":["getDragCursor","dragDirection","isRtl","dragCursor","useDragCursor","isDragging","document","documentElement","style","cursor","pointerEvents","isValueEmpty","value","isNullish","isEmptyString"],"mappings":";;;;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;;AAKA;;;;;;AAMO,SAASA,aAAT,CAAwBC,aAAxB,EAAwC;AAC9C,MAAMC,KAAK,GAAG,0BAAd;AACA,MAAIC,UAAU,GAAG,UAAjB;;AAEA,UAASF,aAAT;AACC,SAAK,GAAL;AACCE,MAAAA,UAAU,GAAG,UAAb;AACA;;AACD,SAAK,GAAL;AACCA,MAAAA,UAAU,GAAGD,KAAK,GAAG,UAAH,GAAgB,UAAlC;AACA;;AACD,SAAK,GAAL;AACCC,MAAAA,UAAU,GAAG,UAAb;AACA;;AACD,SAAK,GAAL;AACCA,MAAAA,UAAU,GAAGD,KAAK,GAAG,UAAH,GAAgB,UAAlC;AACA;AAZF;;AAeA,SAAOC,UAAP;AACA;AAED;;;;;;;;;;AAQO,SAASC,aAAT,CAAwBC,UAAxB,EAAoCJ,aAApC,EAAoD;AAC1D,MAAME,UAAU,GAAGH,aAAa,CAAEC,aAAF,CAAhC;AAEA,0BAAW,YAAM;AAChB,QAAKI,UAAL,EAAkB;AACjBC,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,MAA/B,GAAwCN,UAAxC;AACAG,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BE,aAA/B,GAA+C,MAA/C;AACA,KAHD,MAGO;AACNJ,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,MAA/B,GAAwC,IAAxC;AACAH,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BE,aAA/B,GAA+C,IAA/C;AACA;AACD,GARD,EAQG,CAAEL,UAAF,CARH;AAUA,SAAOF,UAAP;AACA;AAED;;;;;;;;AAMO,SAASQ,YAAT,CAAuBC,KAAvB,EAA+B;AACrC,MAAMC,SAAS,GAAG,OAAOD,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA5D;AACA,MAAME,aAAa,GAAGF,KAAK,KAAK,EAAhC;AAEA,SAAOC,SAAS,IAAIC,aAApB;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { getRTL } from '../utils/style-mixins';\n\n/**\n * Gets a CSS cursor value based on a drag direction.\n *\n * @param {string} dragDirection The drag direction.\n * @return {string} The CSS cursor value.\n */\nexport function getDragCursor( dragDirection ) {\n\tconst isRtl = getRTL();\n\tlet dragCursor = 'n-resize';\n\n\tswitch ( dragDirection ) {\n\t\tcase 'n':\n\t\t\tdragCursor = 'n-resize';\n\t\t\tbreak;\n\t\tcase 'e':\n\t\t\tdragCursor = isRtl ? 'w-resize' : 'e-resize';\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\tdragCursor = 's-resize';\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tdragCursor = isRtl ? 'e-resize' : 'w-resize';\n\t\t\tbreak;\n\t}\n\n\treturn dragCursor;\n}\n\n/**\n * Custom hook that renders a drag cursor when dragging.\n *\n * @param {boolean} isDragging The dragging state.\n * @param {string} dragDirection The drag direction.\n *\n * @return {string} The CSS cursor value.\n */\nexport function useDragCursor( isDragging, dragDirection ) {\n\tconst dragCursor = getDragCursor( dragDirection );\n\n\tuseEffect( () => {\n\t\tif ( isDragging ) {\n\t\t\tdocument.documentElement.style.cursor = dragCursor;\n\t\t\tdocument.documentElement.style.pointerEvents = 'none';\n\t\t} else {\n\t\t\tdocument.documentElement.style.cursor = null;\n\t\t\tdocument.documentElement.style.pointerEvents = null;\n\t\t}\n\t}, [ isDragging ] );\n\n\treturn dragCursor;\n}\n\n/**\n * Determines if a value is empty, null, or undefined.\n *\n * @param {any} value The value to check.\n * @return {boolean} Whether value is empty.\n */\nexport function isValueEmpty( value ) {\n\tconst isNullish = typeof value === 'undefined' || value === null;\n\tconst isEmptyString = value === '';\n\n\treturn isNullish || isEmptyString;\n}\n"]}