{"version":3,"sources":["@wordpress/jest-puppeteer-axe/src/index.js"],"names":["formatViolations","violations","map","help","helpUrl","id","nodes","output","forEach","node","any","length","target","item","message","all","none","join","toPassAxeTests","page","include","exclude","disabledRules","options","config","axe","AxePuppeteer","disableRules","configure","analyze","pass","utils","matcherHint","RECEIVED_COLOR","expect","extend"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport AxePuppeteer from 'axe-puppeteer';\n\n/** @typedef {import('puppeteer').Page} Page */\n\n/** @typedef {import('axe-core').RunOptions} RunOptions */\n\n/** @typedef {import('axe-core').Spec} Spec */\n\n/**\n * Formats the list of violations object returned by Axe analysis.\n *\n * @param {Object} violations The object with the errors found by Axe.\n *\n * @return {string} The user friendly message to display when the matcher fails.\n */\nfunction formatViolations( violations ) {\n\treturn violations\n\t\t.map( ( { help, helpUrl, id, nodes } ) => {\n\t\t\tlet output =\n\t\t\t\t`Rule: \"${ id }\" (${ help })\\n` +\n\t\t\t\t`Help: ${ helpUrl }\\n` +\n\t\t\t\t'Affected Nodes:\\n';\n\n\t\t\tnodes.forEach( ( node ) => {\n\t\t\t\tif ( node.any.length ) {\n\t\t\t\t\toutput += `  ${ node.target }\\n`;\n\t\t\t\t\toutput += '    Fix ANY of the following:\\n';\n\t\t\t\t\tnode.any.forEach( ( item ) => {\n\t\t\t\t\t\toutput += `    - ${ item.message }\\n`;\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( node.all.length ) {\n\t\t\t\t\toutput += `  ${ node.target }\\n`;\n\t\t\t\t\toutput += '    Fix ALL of the following:\\n';\n\t\t\t\t\tnode.all.forEach( ( item ) => {\n\t\t\t\t\t\toutput += `      - ${ item.message }.\\n`;\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( node.none.length ) {\n\t\t\t\t\toutput += `  ${ node.target }\\n`;\n\t\t\t\t\toutput += '    Fix ALL of the following:\\n';\n\t\t\t\t\tnode.none.forEach( ( item ) => {\n\t\t\t\t\t\toutput += `      - ${ item.message }.\\n`;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn output;\n\t\t} )\n\t\t.join( '\\n' );\n}\n\n/**\n * Defines async matcher to check whether a given Puppeteer's page instance passes Axe accessibility tests.\n *\n * @see https://www.deque.com/axe/\n * It is possible to pass optional Axe API options to perform customized check.\n *\n * @see https://github.com/dequelabs/axe-puppeteer\n *\n * @param {Page}          page                 Puppeteer's page instance.\n * @param {?Object}       params               Optional params that allow better control over Axe API.\n * @param {?string|Array} params.include       CSS selector(s) to add to the list of elements\n *                                             to include in analysis.\n * @param {?string|Array} params.exclude       CSS selector(s) to add to the list of elements\n *                                             to exclude from analysis.\n * @param {?Array}        params.disabledRules The list of Axe rules to skip from verification.\n * @param {?RunOptions}   params.options       A flexible way to configure how Axe run operates,\n *                                             see https://github.com/dequelabs/axe-core/blob/master/doc/API.md#options-parameter.\n * @param {?Spec}         params.config        Axe configuration object,\n *                                             see https://github.com/dequelabs/axe-core/blob/master/doc/API.md#api-name-axeconfigure.\n *\n * @return {Object} A matcher object with two keys `pass` and `message`.\n */\nasync function toPassAxeTests(\n\tpage,\n\t{ include, exclude, disabledRules, options, config } = {}\n) {\n\tconst axe = new AxePuppeteer( page );\n\n\tif ( include ) {\n\t\taxe.include( include );\n\t}\n\n\tif ( exclude ) {\n\t\taxe.exclude( exclude );\n\t}\n\n\tif ( options ) {\n\t\taxe.options( options );\n\t}\n\n\tif ( disabledRules ) {\n\t\taxe.disableRules( disabledRules );\n\t}\n\n\tif ( config ) {\n\t\taxe.configure( config );\n\t}\n\n\tconst { violations } = await axe.analyze();\n\n\tconst pass = violations.length === 0;\n\tconst message = pass\n\t\t? () => {\n\t\t\t\treturn (\n\t\t\t\t\tthis.utils.matcherHint( '.not.toPassAxeTests' ) +\n\t\t\t\t\t'\\n\\n' +\n\t\t\t\t\t'Expected page to contain accessibility check violations.\\n' +\n\t\t\t\t\t'No violations found.'\n\t\t\t\t);\n\t\t  }\n\t\t: () => {\n\t\t\t\treturn (\n\t\t\t\t\tthis.utils.matcherHint( '.toPassAxeTests' ) +\n\t\t\t\t\t'\\n\\n' +\n\t\t\t\t\t'Expected page to pass Axe accessibility tests.\\n' +\n\t\t\t\t\t'Violations found:\\n' +\n\t\t\t\t\tthis.utils.RECEIVED_COLOR( formatViolations( violations ) )\n\t\t\t\t);\n\t\t  };\n\n\treturn {\n\t\tmessage,\n\t\tpass,\n\t};\n}\n\nexpect.extend( {\n\ttoPassAxeTests,\n} );\n"]}