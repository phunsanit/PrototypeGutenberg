{"version":3,"sources":["@wordpress/edit-navigation/src/components/menu-locations-editor/use-menu-locations.js"],"names":["useMenuLocations","saveMenu","menuLocations","setMenuLocations","emptyLocations","setEmptyLocations","menuLocationMap","setMenuLocationMap","initMenuLocations","path","method","apiLocations","locationsByMenu","locations","assignMenuToLocation","newLocation","newMenuId","parseInt","oldMenuId","newEmptyLocations","push","updatedLocation","name","menu","updatedLocationKey","newMenuLocations","saveMenuLocations","menuId","id"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tincludes,\n\tmap,\n\tfind,\n\tfindKey,\n\tmapValues,\n\tflatMap,\n\tgroupBy,\n} from 'lodash';\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { useDispatch } from '@wordpress/data';\nimport { useState, useEffect } from '@wordpress/element';\n\nexport default function useMenuLocations() {\n\tconst { saveMenu } = useDispatch( 'core' );\n\tconst [ menuLocations, setMenuLocations ] = useState( null );\n\tconst [ emptyLocations, setEmptyLocations ] = useState( [] );\n\n\t// a local state which maps menus to locations\n\t// so that we can send one call per menu when\n\t// updating locations, otherwise, without this local state\n\t// we'd send one call per location\n\tconst [ menuLocationMap, setMenuLocationMap ] = useState( null );\n\n\tconst initMenuLocations = async () => {\n\t\tconst path = '/__experimental/menu-locations';\n\t\tconst apiLocations = await apiFetch( {\n\t\t\tpath,\n\t\t\tmethod: 'GET',\n\t\t} );\n\t\tsetMenuLocations( flatMap( apiLocations ) );\n\t};\n\n\t// we need to fetch the list of locations\n\t// because the menu location entity\n\t// caches their menu associations\n\tuseEffect( () => {\n\t\tinitMenuLocations();\n\t}, [] );\n\n\t// as soon as we have the menus we group\n\t// all locations by the menuId they are assigned to\n\tuseEffect( () => {\n\t\tif ( menuLocations ) {\n\t\t\tconst locationsByMenu = mapValues(\n\t\t\t\tgroupBy( menuLocations, 'menu' ),\n\t\t\t\t( locations ) => map( locations, 'name' )\n\t\t\t);\n\t\t\tsetMenuLocationMap( locationsByMenu );\n\t\t}\n\t}, [ menuLocations ] );\n\n\tconst assignMenuToLocation = ( newLocation, newMenuId ) => {\n\t\tnewMenuId = parseInt( newMenuId );\n\n\t\t// we need the old menu ID so that we can set empty locations\n\t\tconst oldMenuId = findKey( menuLocationMap, ( locations ) => {\n\t\t\treturn includes( locations, newLocation );\n\t\t} );\n\n\t\t// we save a list on menus that were unassigned from their location\n\t\t// and the location is now empty because we need to send\n\t\t// an update to the API for these menus with an empty location set\n\t\tconst newEmptyLocations = [ ...emptyLocations ];\n\t\tif ( newMenuId === 0 ) {\n\t\t\tif ( ! includes( newEmptyLocations, oldMenuId ) ) {\n\t\t\t\tnewEmptyLocations.push( oldMenuId );\n\t\t\t}\n\t\t} else if ( includes( newEmptyLocations, oldMenuId ) ) {\n\t\t\t// if the menu is assigned to another location\n\t\t\t// we remove it from this list because the API\n\t\t\t// will unassign it from the past location\n\t\t\tdelete newEmptyLocations[ oldMenuId ];\n\t\t}\n\t\tsetEmptyLocations( newEmptyLocations );\n\n\t\tconst updatedLocation = {\n\t\t\t...find( menuLocations, { name: newLocation } ),\n\t\t};\n\t\tupdatedLocation.menu = newMenuId;\n\n\t\tconst updatedLocationKey = findKey( menuLocations, {\n\t\t\tname: newLocation,\n\t\t} );\n\n\t\tconst newMenuLocations = [ ...menuLocations ];\n\t\tnewMenuLocations[ updatedLocationKey ] = { ...updatedLocation };\n\n\t\tsetMenuLocations( newMenuLocations );\n\t};\n\n\tconst saveMenuLocations = async () => {\n\t\t// first call the API to empty the locations of unset menus\n\t\tfor ( const menuId of emptyLocations ) {\n\t\t\tawait saveMenu( {\n\t\t\t\tid: menuId,\n\t\t\t\tlocations: [],\n\t\t\t} );\n\t\t}\n\n\t\t// then save the new ones\n\t\tfor ( const menuId in menuLocationMap ) {\n\t\t\t// sometimes menuId is 0 for unassigned locations\n\t\t\tif ( menuId > 0 ) {\n\t\t\t\tawait saveMenu( {\n\t\t\t\t\tid: menuId,\n\t\t\t\t\tlocations: menuLocationMap[ menuId ],\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t};\n\n\treturn [ menuLocations, saveMenuLocations, assignMenuToLocation ];\n}\n"]}