{"version":3,"sources":["@wordpress/edit-navigation/src/components/menu-locations-editor/use-menu-locations.js"],"names":["includes","map","find","findKey","mapValues","flatMap","groupBy","apiFetch","useDispatch","useState","useEffect","useMenuLocations","saveMenu","menuLocations","setMenuLocations","emptyLocations","setEmptyLocations","menuLocationMap","setMenuLocationMap","initMenuLocations","path","method","apiLocations","locationsByMenu","locations","assignMenuToLocation","newLocation","newMenuId","parseInt","oldMenuId","newEmptyLocations","push","updatedLocation","name","menu","updatedLocationKey","newMenuLocations","saveMenuLocations","menuId","id"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tincludes,\n\tmap,\n\tfind,\n\tfindKey,\n\tmapValues,\n\tflatMap,\n\tgroupBy,\n} from 'lodash';\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { useDispatch } from '@wordpress/data';\nimport { useState, useEffect } from '@wordpress/element';\n\nexport default function useMenuLocations() {\n\tconst { saveMenu } = useDispatch( 'core' );\n\tconst [ menuLocations, setMenuLocations ] = useState( null );\n\tconst [ emptyLocations, setEmptyLocations ] = useState( [] );\n\n\t// a local state which maps menus to locations\n\t// so that we can send one call per menu when\n\t// updating locations, otherwise, without this local state\n\t// we'd send one call per location\n\tconst [ menuLocationMap, setMenuLocationMap ] = useState( null );\n\n\tconst initMenuLocations = async () => {\n\t\tconst path = '/__experimental/menu-locations';\n\t\tconst apiLocations = await apiFetch( {\n\t\t\tpath,\n\t\t\tmethod: 'GET',\n\t\t} );\n\t\tsetMenuLocations( flatMap( apiLocations ) );\n\t};\n\n\t// we need to fetch the list of locations\n\t// because the menu location entity\n\t// caches their menu associations\n\tuseEffect( () => {\n\t\tinitMenuLocations();\n\t}, [] );\n\n\t// as soon as we have the menus we group\n\t// all locations by the menuId they are assigned to\n\tuseEffect( () => {\n\t\tif ( menuLocations ) {\n\t\t\tconst locationsByMenu = mapValues(\n\t\t\t\tgroupBy( menuLocations, 'menu' ),\n\t\t\t\t( locations ) => map( locations, 'name' )\n\t\t\t);\n\t\t\tsetMenuLocationMap( locationsByMenu );\n\t\t}\n\t}, [ menuLocations ] );\n\n\tconst assignMenuToLocation = ( newLocation, newMenuId ) => {\n\t\tnewMenuId = parseInt( newMenuId );\n\n\t\t// we need the old menu ID so that we can set empty locations\n\t\tconst oldMenuId = findKey( menuLocationMap, ( locations ) => {\n\t\t\treturn includes( locations, newLocation );\n\t\t} );\n\n\t\t// we save a list on menus that were unassigned from their location\n\t\t// and the location is now empty because we need to send\n\t\t// an update to the API for these menus with an empty location set\n\t\tconst newEmptyLocations = [ ...emptyLocations ];\n\t\tif ( newMenuId === 0 ) {\n\t\t\tif ( ! includes( newEmptyLocations, oldMenuId ) ) {\n\t\t\t\tnewEmptyLocations.push( oldMenuId );\n\t\t\t}\n\t\t} else if ( includes( newEmptyLocations, oldMenuId ) ) {\n\t\t\t// if the menu is assigned to another location\n\t\t\t// we remove it from this list because the API\n\t\t\t// will unassign it from the past location\n\t\t\tdelete newEmptyLocations[ oldMenuId ];\n\t\t}\n\t\tsetEmptyLocations( newEmptyLocations );\n\n\t\tconst updatedLocation = {\n\t\t\t...find( menuLocations, { name: newLocation } ),\n\t\t};\n\t\tupdatedLocation.menu = newMenuId;\n\n\t\tconst updatedLocationKey = findKey( menuLocations, {\n\t\t\tname: newLocation,\n\t\t} );\n\n\t\tconst newMenuLocations = [ ...menuLocations ];\n\t\tnewMenuLocations[ updatedLocationKey ] = { ...updatedLocation };\n\n\t\tsetMenuLocations( newMenuLocations );\n\t};\n\n\tconst saveMenuLocations = async () => {\n\t\t// first call the API to empty the locations of unset menus\n\t\tfor ( const menuId of emptyLocations ) {\n\t\t\tawait saveMenu( {\n\t\t\t\tid: menuId,\n\t\t\t\tlocations: [],\n\t\t\t} );\n\t\t}\n\n\t\t// then save the new ones\n\t\tfor ( const menuId in menuLocationMap ) {\n\t\t\t// sometimes menuId is 0 for unassigned locations\n\t\t\tif ( menuId > 0 ) {\n\t\t\t\tawait saveMenu( {\n\t\t\t\t\tid: menuId,\n\t\t\t\t\tlocations: menuLocationMap[ menuId ],\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t};\n\n\treturn [ menuLocations, saveMenuLocations, assignMenuToLocation ];\n}\n"]}