{"version":3,"sources":["@wordpress/edit-widgets/src/components/customizer-edit-widgets-initializer/sync-customizer.js"],"names":["waitForSelectValue","listener","value","changeTrigger","Promise","resolve","unsubscribe","window","wp","data","subscribe","getWidgetAreasObject","select","getEntityRecords","getEditedEntityRecord","reduce","widgetAreasObject","id","blocks","previewBlocksInWidgetArea","customizePreviewIframe","document","querySelector","contentDocument","widgetArea","innerHTML","parentElement","outerHTML","updateSettingInputValue","nextWidgetAreas","settingInput","getElementById","JSON","stringify","Object","keys","dispatchEvent","Event","customize","ran","bind","previewer","widgetAreas","parse","err","hasFinishedResolution","then","forEach","dispatch","editEntityRecord","content","didUpdate"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { throttle } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { parse, serialize } from '@wordpress/blocks';\n\n/*\nWidget area edits made in the Customizer are synced to Customizer\nchangesets as an object, encoded as a JSON string, where the keys\nare widget area IDs and the values are serialized block content.\nThis file takes care of that syncing using the 2-way data binding\nsupported by `WP_Customize_Control`s. The process is as follows:\n\n- On load, the client checks if the current changeset has\nwidget areas that it can parse and use to hydrate the store.\nIt will load all widget areas for the current theme, but if\nthe changeset has content for a given area, it will replace\nits actual published content with the changeset's.\n\n- On edit, the client updates the 2-way bound input with a new object that maps\nwidget area IDs and the values are serialized block content, encoded\nas a JSON string.\n\n- On publish, a PHP action will parse the JSON string in the\nchangeset and update all the widget areas in it, to store the\nnew content.\n*/\n\nconst waitForSelectValue = ( listener, value, changeTrigger ) => {\n\treturn new Promise( ( resolve ) => {\n\t\tchangeTrigger();\n\t\tif ( listener() === value ) {\n\t\t\tresolve();\n\t\t\treturn;\n\t\t}\n\t\tconst unsubscribe = window.wp.data.subscribe( () => {\n\t\t\tif ( listener() === value ) {\n\t\t\t\tunsubscribe();\n\t\t\t\tresolve();\n\t\t\t}\n\t\t} );\n\t} );\n};\n\n// Get widget areas from the store in an `id => blocks` mapping.\nconst getWidgetAreasObject = () => {\n\tconst { getEntityRecords, getEditedEntityRecord } = window.wp.data.select(\n\t\t'core'\n\t);\n\n\treturn getEntityRecords( 'root', 'widgetArea' ).reduce(\n\t\t( widgetAreasObject, { id } ) => {\n\t\t\twidgetAreasObject[ id ] = getEditedEntityRecord(\n\t\t\t\t'root',\n\t\t\t\t'widgetArea',\n\t\t\t\tid\n\t\t\t).blocks;\n\t\t\treturn widgetAreasObject;\n\t\t},\n\t\t{}\n\t);\n};\n\n// Serialize the provided blocks and render them in the widget area with the provided ID.\nconst previewBlocksInWidgetArea = throttle( ( id, blocks ) => {\n\tconst customizePreviewIframe = document.querySelector(\n\t\t'#customize-preview > iframe'\n\t);\n\tif (\n\t\t! customizePreviewIframe ||\n\t\t! customizePreviewIframe.contentDocument\n\t) {\n\t\treturn;\n\t}\n\n\tconst widgetArea = customizePreviewIframe.contentDocument.querySelector(\n\t\t`[data-customize-partial-placement-context*='\"sidebar_id\":\"${ id }\"']`\n\t);\n\tif ( widgetArea ) {\n\t\twidgetArea.innerHTML = serialize( blocks );\n\t\twidgetArea.parentElement.innerHTML = widgetArea.outerHTML;\n\t}\n}, 1000 );\n\n// Update the hidden input that has 2-way data binding with Customizer settings.\nconst updateSettingInputValue = throttle( ( nextWidgetAreas ) => {\n\tconst settingInput = document.getElementById(\n\t\t'_customize-input-gutenberg_widget_blocks'\n\t);\n\tif ( settingInput ) {\n\t\tsettingInput.value = JSON.stringify(\n\t\t\tObject.keys( nextWidgetAreas ).reduce( ( value, id ) => {\n\t\t\t\tvalue[ id ] = serialize( nextWidgetAreas[ id ] );\n\t\t\t\treturn value;\n\t\t\t}, {} )\n\t\t);\n\t\tsettingInput.dispatchEvent( new window.Event( 'change' ) );\n\t}\n}, 1000 );\n\n// Check that all the necessary globals are present.\nif ( window.wp && window.wp.customize && window.wp.data ) {\n\tlet ran = false;\n\t// Wait for the Customizer to finish bootstrapping.\n\twindow.wp.customize.bind( 'ready', () =>\n\t\twindow.wp.customize.previewer.bind( 'ready', () => {\n\t\t\t// The Customizer will call this on every preview refresh,\n\t\t\t// but we only want to run it once to avoid running another\n\t\t\t// store setup that would set changeset edits and save\n\t\t\t// widget blocks unintentionally.\n\t\t\tif ( ran ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tran = true;\n\n\t\t\t// Try to parse a previous changeset from the hidden input.\n\t\t\tlet widgetAreas;\n\t\t\ttry {\n\t\t\t\twidgetAreas = JSON.parse(\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'_customize-input-gutenberg_widget_blocks'\n\t\t\t\t\t).value\n\t\t\t\t);\n\t\t\t\twidgetAreas = Object.keys( widgetAreas ).reduce(\n\t\t\t\t\t( value, id ) => {\n\t\t\t\t\t\tvalue[ id ] = parse( widgetAreas[ id ] );\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t);\n\t\t\t} catch ( err ) {\n\t\t\t\twidgetAreas = {};\n\t\t\t}\n\n\t\t\t// Wait for setup to finish before overwriting sidebars with changeset data,\n\t\t\t// if any, and subscribe to registry changes after that so that we can preview\n\t\t\t// changes and update the hidden input's value when any of the widget areas change.\n\t\t\twaitForSelectValue(\n\t\t\t\t() =>\n\t\t\t\t\twindow.wp.data\n\t\t\t\t\t\t.select( 'core' )\n\t\t\t\t\t\t.hasFinishedResolution( 'getEntityRecords', [\n\t\t\t\t\t\t\t'root',\n\t\t\t\t\t\t\t'widgetArea',\n\t\t\t\t\t\t] ),\n\t\t\t\ttrue,\n\t\t\t\t() =>\n\t\t\t\t\twindow.wp.data\n\t\t\t\t\t\t.select( 'core' )\n\t\t\t\t\t\t.getEntityRecords( 'root', 'widgetArea' )\n\t\t\t).then( () => {\n\t\t\t\tObject.keys( widgetAreas ).forEach( ( id ) => {\n\t\t\t\t\twindow.wp.data\n\t\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t\t.editEntityRecord( 'root', 'widgetArea', id, {\n\t\t\t\t\t\t\tcontent: serialize( widgetAreas[ id ] ),\n\t\t\t\t\t\t\tblocks: widgetAreas[ id ],\n\t\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\twidgetAreas = getWidgetAreasObject();\n\t\t\t\twindow.wp.data.subscribe( () => {\n\t\t\t\t\tconst nextWidgetAreas = getWidgetAreasObject();\n\n\t\t\t\t\tlet didUpdate = false;\n\t\t\t\t\tfor ( const id of Object.keys( nextWidgetAreas ) ) {\n\t\t\t\t\t\tif ( widgetAreas[ id ] !== nextWidgetAreas[ id ] ) {\n\t\t\t\t\t\t\tpreviewBlocksInWidgetArea(\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tnextWidgetAreas[ id ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdidUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( didUpdate ) {\n\t\t\t\t\t\tupdateSettingInputValue( nextWidgetAreas );\n\t\t\t\t\t}\n\t\t\t\t\twidgetAreas = nextWidgetAreas;\n\t\t\t\t} );\n\t\t\t} );\n\t\t} )\n\t);\n}\n"]}