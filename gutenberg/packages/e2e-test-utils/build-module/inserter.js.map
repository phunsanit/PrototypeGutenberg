{"version":3,"sources":["@wordpress/e2e-test-utils/src/inserter.js"],"names":["pressKeyWithModifier","INSERTER_SEARCH_SELECTOR","openGlobalBlockInserter","isGlobalInserterOpen","page","$","tab","click","toggleGlobalBlockInserter","waitForSelector","closeGlobalBlockInserter","evaluate","document","querySelector","searchForBlock","searchTerm","focus","keyboard","type","searchForPattern","$x","insertBlock","insertButton","insertPattern"],"mappings":";;;;AAAA;;;AAGA,SAASA,oBAAT,QAAqC,2BAArC,C,CAEA;AACA;;AACA,IAAMC,wBAAwB,GAC7B,0EADD;AAGA;;;;AAGA,gBAAsBC,uBAAtB;AAAA;AAAA;;;sFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKC,oBAAoB,EADzB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIaC,IAAI,CAACC,CAAL,CACjB,8FADiB,CAJb;;AAAA;AAICC,YAAAA,GAJD;;AAAA,iBAQAA,GARA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASEA,GAAG,CAACC,KAAJ,EATF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAYCC,yBAAyB,EAZ1B;;AAAA;AAAA;AAAA,mBAgBCJ,IAAI,CAACK,eAAL,CAAsB,8BAAtB,CAhBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBP,gBAAsBC,wBAAtB;AAAA;AAAA;;;uFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKP,oBAAoB,EADzB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAECK,yBAAyB,EAF1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAMQL,oB;;;;;mFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcC,IAAI,CAACO,QAAL,CAAe,YAAM;AACjC,qBAAO,CAAC,CAAEC,QAAQ,CAACC,aAAT,CACT,8GADS,CAAV;AAGA,aAJY,CADd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAQeL,yB;;;AAMf;;;;;;;;wFANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACOJ,IAAI,CAACG,KAAL,CACL,wFADK,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,gBAAsBO,cAAtB;AAAA;AAAA;AAOA;;;;;;;6EAPO,kBAA+BC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAb,uBAAuB,EADvB;;AAAA;AAAA;AAAA,mBAEAE,IAAI,CAACY,KAAL,CAAYf,wBAAZ,CAFA;;AAAA;AAAA;AAAA,mBAGAD,oBAAoB,CAAE,SAAF,EAAa,GAAb,CAHpB;;AAAA;AAAA;AAAA,mBAIAI,IAAI,CAACa,QAAL,CAAcC,IAAd,CAAoBH,UAApB,CAJA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAYP,gBAAsBI,gBAAtB;AAAA;AAAA;AAYA;;;;;;;;+EAZO,kBAAiCJ,UAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAb,uBAAuB,EADvB;;AAAA;AAAA;AAAA,mBAGgBE,IAAI,CAACgB,EAAL,CACrB,8EADqB,CAHhB;;AAAA;AAAA;AAAA;AAGEd,YAAAA,GAHF;AAAA;AAAA,mBAMAA,GAAG,CAACC,KAAJ,EANA;;AAAA;AAAA;AAAA,mBAOAH,IAAI,CAACY,KAAL,CAAYf,wBAAZ,CAPA;;AAAA;AAAA;AAAA,mBAQAD,oBAAoB,CAAE,SAAF,EAAa,GAAb,CARpB;;AAAA;AAAA;AAAA,mBASAI,IAAI,CAACa,QAAL,CAAcC,IAAd,CAAoBH,UAApB,CATA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBP,gBAAsBM,WAAtB;AAAA;AAAA;AAQA;;;;;;;;0EARO,kBAA4BN,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAD,cAAc,CAAEC,UAAF,CADd;;AAAA;AAAA;AAAA,mBAGCX,IAAI,CAACgB,EAAL,4CAA8CL,UAA9C,SAHD;;AAAA;AAEAO,YAAAA,YAFA,kBAIF,CAJE;AAAA;AAAA,mBAKAA,YAAY,CAACf,KAAb,EALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,gBAAsBgB,aAAtB;AAAA;AAAA;;;4EAAO,kBAA8BR,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAI,gBAAgB,CAAEJ,UAAF,CADhB;;AAAA;AAAA;AAAA,mBAGCX,IAAI,CAACgB,EAAL,0DAC8CL,UAD9C,SAHD;;AAAA;AAEAO,YAAAA,YAFA,kBAMF,CANE;AAAA;AAAA,mBAOAA,YAAY,CAACf,KAAb,EAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Internal dependencies\n */\nimport { pressKeyWithModifier } from './press-key-with-modifier';\n\n// This selector is written to support the current and old inserter markup\n// because the performance tests need to be able to run across versions.\nconst INSERTER_SEARCH_SELECTOR =\n\t'.block-editor-inserter__search-input,input.block-editor-inserter__search';\n\n/**\n * Opens the global block inserter.\n */\nexport async function openGlobalBlockInserter() {\n\tif ( await isGlobalInserterOpen() ) {\n\t\t// If global inserter is already opened, reset to an initial state where\n\t\t// the default (first) tab is selected.\n\t\tconst tab = await page.$(\n\t\t\t'.block-editor-inserter__tabs .components-tab-panel__tabs-item:nth-of-type(1):not(.is-active)'\n\t\t);\n\n\t\tif ( tab ) {\n\t\t\tawait tab.click();\n\t\t}\n\t} else {\n\t\tawait toggleGlobalBlockInserter();\n\n\t\t// Waiting here is necessary because sometimes the inserter takes more time to\n\t\t// render than Puppeteer takes to complete the 'click' action\n\t\tawait page.waitForSelector( '.block-editor-inserter__menu' );\n\t}\n}\n\nexport async function closeGlobalBlockInserter() {\n\tif ( await isGlobalInserterOpen() ) {\n\t\tawait toggleGlobalBlockInserter();\n\t}\n}\n\nasync function isGlobalInserterOpen() {\n\treturn await page.evaluate( () => {\n\t\treturn !! document.querySelector(\n\t\t\t'.edit-post-header [aria-label=\"Add block\"].is-pressed, .edit-site-header [aria-label=\"Add block\"].is-pressed'\n\t\t);\n\t} );\n}\n\nasync function toggleGlobalBlockInserter() {\n\tawait page.click(\n\t\t'.edit-post-header [aria-label=\"Add block\"], .edit-site-header [aria-label=\"Add block\"]'\n\t);\n}\n\n/**\n * Search for block in the global inserter\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function searchForBlock( searchTerm ) {\n\tawait openGlobalBlockInserter();\n\tawait page.focus( INSERTER_SEARCH_SELECTOR );\n\tawait pressKeyWithModifier( 'primary', 'a' );\n\tawait page.keyboard.type( searchTerm );\n}\n\n/**\n * Search for pattern in the global inserter\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function searchForPattern( searchTerm ) {\n\tawait openGlobalBlockInserter();\n\t// Select the patterns tab\n\tconst [ tab ] = await page.$x(\n\t\t'//div[contains(@class, \"block-editor-inserter__tabs\")]//button[.=\"Patterns\"]'\n\t);\n\tawait tab.click();\n\tawait page.focus( INSERTER_SEARCH_SELECTOR );\n\tawait pressKeyWithModifier( 'primary', 'a' );\n\tawait page.keyboard.type( searchTerm );\n}\n\n/**\n * Opens the inserter, searches for the given term, then selects the first\n * result that appears. It then waits briefly for the block list to update.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function insertBlock( searchTerm ) {\n\tawait searchForBlock( searchTerm );\n\tconst insertButton = (\n\t\tawait page.$x( `//button//span[contains(text(), '${ searchTerm }')]` )\n\t )[ 0 ];\n\tawait insertButton.click();\n}\n\n/**\n * Opens the inserter, searches for the given pattern, then selects the first\n * result that appears. It then waits briefly for the block list to update.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function insertPattern( searchTerm ) {\n\tawait searchForPattern( searchTerm );\n\tconst insertButton = (\n\t\tawait page.$x(\n\t\t\t`//div[@role = 'button']//div[contains(text(), '${ searchTerm }')]`\n\t\t)\n\t )[ 0 ];\n\tawait insertButton.click();\n}\n"]}